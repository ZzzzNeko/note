import{_ as s,o as l,c as a,V as o}from"./chunks/framework.3b22bc79.js";const C=JSON.parse('{"title":"语言基础","description":"","frontmatter":{},"headers":[],"relativePath":"程序/知识梳理/前端概览/01 语言基础.md","filePath":"程序/知识梳理/前端概览/01 语言基础.md","lastUpdated":1688291041000}'),n={name:"程序/知识梳理/前端概览/01 语言基础.md"},e=o(`<h1 id="语言基础" tabindex="-1">语言基础 <a class="header-anchor" href="#语言基础" aria-label="Permalink to &quot;语言基础&quot;">​</a></h1><h2 id="html" tabindex="-1">HTML <a class="header-anchor" href="#html" aria-label="Permalink to &quot;HTML&quot;">​</a></h2><h3 id="文档类型" tabindex="-1">文档类型 <a class="header-anchor" href="#文档类型" aria-label="Permalink to &quot;文档类型&quot;">​</a></h3><p>指定 <code>!DOCTYPE</code> 表明使用 H5 标准，浏览器将使用标准模式进行解析</p><p>文档解析类型包括</p><ul><li>标准模式</li><li>怪异模式：兼容旧版本浏览器</li><li>近标准模式：与标准模式基本一致，在少数场景下采用怪异模式渲染</li></ul><p>标准模式与怪异模式的区别</p><ul><li>盒子模型 <ul><li>标准模式：盒子大小表现为 <code>box-sizing: content</code> (注：这里只是便于理解差异)</li><li>怪异模式：盒子大小表现为 <code>box-sizing: border</code> (注：这里只是便于理解差异)</li></ul></li><li>图片元素垂直对齐方式 <ul><li>标准模式：图片 <code>vertial-align</code> 表现为 <code>baseline</code></li><li>怪异模式：图片 <code>vertial-align</code> 表现为 <code>bottom</code></li></ul></li><li>内联元素尺寸 <ul><li>标准模式：宽高设置无效</li><li>怪异模式：宽高设置有效</li></ul></li><li>元素百分比高度 <ul><li>标准模式：正常生效</li><li>怪异模式：根据内容高度变化</li></ul></li><li>溢出处理 <ul><li>标准模式：溢出内容不被裁剪，呈现在元素框外</li><li>怪异模式：溢出内容不被裁剪，元素框自动调整大小</li></ul></li></ul><h3 id="语义化优点" tabindex="-1">语义化优点 <a class="header-anchor" href="#语义化优点" aria-label="Permalink to &quot;语义化优点&quot;">​</a></h3><ul><li>开发友好：增加了可读性，便于开发和维护</li><li>机器友好：利于 SEO，利于文本处理</li></ul><h3 id="h5-新特性" tabindex="-1">H5 新特性 <a class="header-anchor" href="#h5-新特性" aria-label="Permalink to &quot;H5 新特性&quot;">​</a></h3><ul><li>新语义标签</li><li>表单扩展</li><li>本地存储</li><li>地理定位</li><li>离线应用</li><li>音频视频</li><li>canvas/webGL</li><li>history</li><li>webscoket</li><li>requestAnimationFrame</li></ul><h3 id="src-与-href-的区别" tabindex="-1">src 与 href 的区别 <a class="header-anchor" href="#src-与-href-的区别" aria-label="Permalink to &quot;src 与 href 的区别&quot;">​</a></h3><ul><li>src: 指向外部资源位置，将资源内容下载并应当到文档内，下载时会暂停其他资源的处理</li><li>href: 指向网络资源位置，建立当前元素与资源之间的连接，下载时不会停止对当前文档的处理</li></ul><h3 id="异步-script" tabindex="-1">异步 script <a class="header-anchor" href="#异步-script" aria-label="Permalink to &quot;异步 script&quot;">​</a></h3><ul><li>正常：同步加载，HTML 解析 -&gt; script 加载 并 解析(HTML 解析暂停) -&gt; HTML 解析</li><li>defer：延迟执行, HTML 解析 -&gt; script 加载 -&gt; script 解析(HTML 解析暂停) -&gt; HTML 解析</li><li>async：异步执行, HTML 解析 -&gt; script 加载 -&gt; HTML 解析完毕 -&gt; script 解析</li></ul><p>正常流程中遇到 script 会执行加载和解析并阻断 HTML 解析，故 script 通常都置于文档最后 <br> defer 会进行下载但不会阻塞 HTML 解析，在文档解析完成后才进行脚本解析，defer 不会改变脚本的执行顺序 <br> async 会在下载之后直接进行解析，此时会阻断 HTML 解析，async 不会考虑脚本顺序，故只能用于埋点、监控等异步场景</p><h2 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h2><h3 id="选择器" tabindex="-1">选择器 <a class="header-anchor" href="#选择器" aria-label="Permalink to &quot;选择器&quot;">​</a></h3><p>基础选择器</p><ul><li>通配选择器: <code>*</code></li><li>标签选择器: <code>tag</code></li><li>ID 选择器: <code>#id</code></li><li>类选择器: <code>.class</code></li><li>属性选择器: <code>[attr]</code> <code>[attr operator value flag]</code><ul><li>关系符号(operator)如下 <ul><li><code>=</code>: <code>attr</code> 的值为 <code>value</code></li><li><code>~=</code>: <code>attr</code> 为以空格为分隔的值列表，其中包含 <code>value</code></li><li><code>|=</code>: <code>attr</code> 的值为 <code>value</code> 或以 <code>value-</code> 作为前缀</li><li><code>^=</code>: <code>attr</code> 的值以 <code>value</code> 作为开头</li><li><code>$=</code>: <code>attr</code> 的值以 <code>value</code> 作为结尾</li><li><code>*=</code>: <code>attr</code> 的值包含 <code>value</code></li></ul></li><li>修饰符(flag)如下(可选) <ul><li><code>i</code> 或 <code>I</code>: 匹配属性值时忽略大小写</li></ul></li></ul></li></ul><p>关系选择器</p><ul><li>相邻兄弟选择器: <code>A + B</code>，B 为<strong>紧邻</strong> A <strong>之后</strong>同层级且符合条件的<strong>单一元素</strong></li><li>通用兄弟选择器: <code>A ~ B</code>，B 为位于 A <strong>之后</strong>同层级且符合条件的<strong>全部元素</strong></li><li>子选择器: <code>&gt;</code></li><li>后代选择器: <code>␣</code> (空格)</li></ul><p>伪类选择器(这里仅列举部分)</p><ul><li><code>:active</code></li><li><code>:hover</code></li><li><code>:last-child</code></li><li><code>:last-of-type</code></li></ul><p>伪元素选择器(这里仅列举部分)</p><ul><li><code>::before</code></li><li><code>::after</code></li><li><code>::first-line</code></li><li><code>::first-letter</code></li></ul><h3 id="选择器优先级" tabindex="-1">选择器优先级 <a class="header-anchor" href="#选择器优先级" aria-label="Permalink to &quot;选择器优先级&quot;">​</a></h3><p>!important &gt; 内联 &gt; ID 选择器 &gt; 类选择器 &gt; 标签选择器</p><p>注意：获取元素实际的样式需要使用 <code>getComputedStyle</code></p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">#</span><span style="color:#F78C6C;">black</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> black</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">black</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">style</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">color: red;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">black</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> black </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">black</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(black</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">style</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">color)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// red</span></span>
<span class="line"><span style="color:#A6ACCD;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">getComputedStyle</span><span style="color:#A6ACCD;">(black)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">color)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// rgb(0, 0, 0)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h3 id="选择器匹配顺序" tabindex="-1">选择器匹配顺序 <a class="header-anchor" href="#选择器匹配顺序" aria-label="Permalink to &quot;选择器匹配顺序&quot;">​</a></h3><p>选择器按照从右向左的顺序进行匹配 <br> 选择器的层级不宜过深，会降低效率</p><h3 id="link-与-import" tabindex="-1">link 与 @import <a class="header-anchor" href="#link-与-import" aria-label="Permalink to &quot;link 与 @import&quot;">​</a></h3><ul><li>link 引入的样式权重高于 @import</li><li>页面加载时，link 会同步加载，@import 会在页面加载完再加载</li></ul><h3 id="元素类型" tabindex="-1">元素类型 <a class="header-anchor" href="#元素类型" aria-label="Permalink to &quot;元素类型&quot;">​</a></h3><p>根据元素是否具有可替换内容分为</p><ul><li>可替换元素</li><li>非替换元素</li></ul><p>可替换元素可以通过修改其某个属性改变其呈现内容</p><p>可替换元素的特性</p><ul><li>样式表现在 CSS 作用域之外</li><li>有自身尺寸</li><li>对特定属性有自身规范</li><li>都是行内元素</li></ul><p>可替换元素的尺寸通常受以下三类尺寸影响</p><ul><li>固有尺寸: 元素的默认尺寸，隐含了宽高比例，该尺寸无法被修改</li><li>HTML 尺寸: 通过 HTML 元素属性修改元素尺寸(非 style 属性)</li><li>CSS 尺寸: 通过 CSS 指定元素尺寸</li></ul><p>优先级： CSS 尺寸 &gt; HTML 尺寸 &gt; 固有尺寸(宽高比例) &gt; 固有尺寸(尺寸数值)</p><h3 id="盒子模型" tabindex="-1">盒子模型 <a class="header-anchor" href="#盒子模型" aria-label="Permalink to &quot;盒子模型&quot;">​</a></h3><h4 id="盒子尺寸" tabindex="-1">盒子尺寸 <a class="header-anchor" href="#盒子尺寸" aria-label="Permalink to &quot;盒子尺寸&quot;">​</a></h4><p>内联非替换元素的垂直方向 margin padding border 不加入高度计算，但会发生渲染</p><p>margin 和 padding 百分比值基于父级<strong>宽度</strong>计算</p><p>滚动内容底部留白使用 margin 代替 padding 可以兼容 IE 和火狐</p><h4 id="外边距合并" tabindex="-1">外边距合并 <a class="header-anchor" href="#外边距合并" aria-label="Permalink to &quot;外边距合并&quot;">​</a></h4><p>块级元素，垂直方向(默认 writing-mode 下)上会出现外边距合并现象(正值合并取大值，负值合并取小值，正副合并取和值)</p><ul><li>兄弟元素：元素的下边距与相邻兄弟的上边距进行合并</li><li>父子元素：父元素与首个或末尾子元素上下边距进行合并，满足以下任一条件即可消除该现象 <ul><li>父元素设置为块状格式化上下文元素</li><li>父元素设置 border-top/bottom</li><li>父元素设置 padding-top/bottom</li><li>父元素与首个或末尾子元素之间添加内联元素</li><li>对于<strong>底部</strong>外边距合并，设置父元素高度(height, min-height, max-height) 也可消除</li></ul></li><li>空块级元素：元素自身上下边距进行合并，满足以下任一条件即可消除该现象 <ul><li>设置 border-top/bottom</li><li>设置 padding-top/bottom</li><li>添加内联元素</li><li>设置高度(height, min-height)</li></ul></li></ul><h3 id="幽灵空白节点" tabindex="-1">幽灵空白节点 <a class="header-anchor" href="#幽灵空白节点" aria-label="Permalink to &quot;幽灵空白节点&quot;">​</a></h3><p>HTML5 声明中，内联元素前会创建一个同行高的 0 宽内联盒子；可以使用 <code>font-size: 0</code>修正</p><div class="language-pug"><button title="Copy Code" class="copy"></button><span class="lang">pug</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">div</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">span</span></span></code></pre></div><h3 id="bfc-ifc-ffc-gfc" tabindex="-1">BFC | IFC | FFC | GFC <a class="header-anchor" href="#bfc-ifc-ffc-gfc" aria-label="Permalink to &quot;BFC | IFC | FFC | GFC&quot;">​</a></h3><p>BFC: 块级格式化上下文，内部元素与外部元素相互隔离，满足以下条件之一即可</p><ul><li>如何创建 <ul><li>根元素</li><li>浮动元素</li><li>脱离文档流: position: fixed|absolute</li><li>行内块级元素: inline-block、table-cell、table-caption</li><li>overflow 非 visible 的块级元素</li><li>弹性元素</li><li>网格元素</li><li>多列容器</li></ul></li><li>解决问题 <ul><li>浮动元素带来的高度塌陷(通常设置 <code>overflow: auto|hidden</code>)</li><li>外边距合并</li></ul></li></ul><p>IFC: 行内格式化上下文</p><ul><li>如何创建 <ul><li>内联元素</li><li>文本元素</li></ul></li><li>表现特点 <ul><li>忽略垂直方向 padding、margin</li><li>尺寸根据内容决定</li><li>块方向上对齐：<code>vertical-align</code></li><li>行内方向上对齐：<code>text-align</code></li></ul></li></ul><h3 id="隐藏元素的方式" tabindex="-1">隐藏元素的方式 <a class="header-anchor" href="#隐藏元素的方式" aria-label="Permalink to &quot;隐藏元素的方式&quot;">​</a></h3><ul><li>视觉上隐藏 <ul><li><code>opacity: 0</code></li><li><code>visibility: hidden</code></li><li><code>transform: scale(0, 0)</code></li></ul></li><li>文档中隐藏 <ul><li><code>display: none</code></li></ul></li></ul><h3 id="定位" tabindex="-1">定位 <a class="header-anchor" href="#定位" aria-label="Permalink to &quot;定位&quot;">​</a></h3><p><code>position</code></p><ul><li>static</li><li>relative</li><li>absolute</li><li>fixed</li><li>stick: 粘性定位(类似于滚动吸顶的效果)</li></ul><h3 id="转换" tabindex="-1">转换 <a class="header-anchor" href="#转换" aria-label="Permalink to &quot;转换&quot;">​</a></h3><p><code>transform</code> 提供了元素 位移、缩放、旋转、倾斜、透视 等表现形式</p><p>在位移方面，<code>transform: translate</code> 与 <code>position: absolute</code> 的区别</p><ul><li><code>translate</code> 创建复合图层，交由 GPU 处理，若用作动画，其最先单位非 px，动画表现更好</li><li><code>absolute</code>: 触发当前元素的回流，交由 CPU 处理，若用作动画，其最小单位为 px，性能开支更高</li></ul><h3 id="浮动" tabindex="-1">浮动 <a class="header-anchor" href="#浮动" aria-label="Permalink to &quot;浮动&quot;">​</a></h3><p>浮动的特点</p><ul><li>包裹性/自适应：未设置宽度的浮动元素宽度为内容宽度，且不超过父元素宽度</li><li>块状化并格式化上下文：浮动元素 display 转换为 block 或 table</li><li>破坏文档流</li><li>无 margin 合并</li></ul><p>清除浮动</p><ul><li>在浮动元素后添加空元素并设置 <code>clear: both</code> (left/right 本质上只有一种情况生效) <ul><li>作用于块级元素，让当前元素不受前一个 float 元素影响(不会改变 float 元素本身)</li><li>left/right 对应前一个 float 元素的浮动方向，使用 both 可以免去判断</li></ul></li><li>创建 BFC，给浮动元素容器添加 <code>overflow: hidden|auto</code></li><li>利用伪元素，给浮动元素后添加 <code>::after { content: &quot;&quot;; display: block; clear: both; }</code></li></ul><h3 id="布局" tabindex="-1">布局 <a class="header-anchor" href="#布局" aria-label="Permalink to &quot;布局&quot;">​</a></h3><p>流式文档</p><ul><li>流动模型：在默认文档流中布局，元素会具有流动性按照顺序垂直延申分布</li><li>浮动模型：元素在文档流中布局，但元素具有移动的浮动性，其他内联元素在其附近环绕</li><li>层模型：元素脱离文档流进行布局，脱离的部分相当于新的文档流，层层叠加</li></ul><p>布局类型：通过 <code>display</code> 指定 外在盒子(<code>block</code>、<code>inline</code>)表现 和 容器盒子(<code>flow</code>、<code>flow-root</code>、<code>flex</code>、<code>grid</code>、<code>table</code>) 布局</p><ul><li>流式布局：默认的布局方式</li><li>弹性布局：给定内容呈现规则，用于响应式的处理内容呈现</li><li>网格布局：给定网格呈现规则，一般用于高层级内容模块的展示划分</li><li>表格布局：表格元素默认，且不应应用于其他元素</li></ul><h3 id="响应式支持" tabindex="-1">响应式支持 <a class="header-anchor" href="#响应式支持" aria-label="Permalink to &quot;响应式支持&quot;">​</a></h3><p>响应式即针对不同的使用场景采用不同的呈现方式，一般通过屏幕尺寸区分应用场景，常见的处理方式有</p><ul><li>媒体查询: 通过 <code>@media screen</code> 判断当前屏幕尺寸，采取不同的呈现方式</li><li>固定宽度：将不同设备的屏幕尺寸视为一致，常用于 小程序 等以移动设备为主的场景 <ul><li>百分比单位：使用 <code>vw</code>、<code>vh</code>，一般很少使用</li><li>指定设备宽度：如设置 <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=750px&quot;&gt;</code>，常用于 小程序</li><li>黑屏处理：固定使用场景，超出该场景下的部分使用黑屏处理，常用于 h5 游戏</li></ul></li><li>相对尺寸：尺寸使用 <code>rem</code> 进行描述，根据屏幕尺寸动态修改 <code>document.documentElement.style.fontSize</code> 的尺寸 (项目中可以使用 <code>pxtorem</code> 统一处理 <code>rem</code> 转换)</li><li>弹性描述：使用 网格布局和弹性布局 处理响应式表现(可结合媒体查询使用)</li></ul><h2 id="js" tabindex="-1">JS <a class="header-anchor" href="#js" aria-label="Permalink to &quot;JS&quot;">​</a></h2><h3 id="内置类型" tabindex="-1">内置类型 <a class="header-anchor" href="#内置类型" aria-label="Permalink to &quot;内置类型&quot;">​</a></h3><ul><li>基本类型：<code>string</code> <code>number</code> <code>boolen</code> <code>null</code> <code>undefined</code> <code>symbol</code> <code>bigint</code></li><li>引用类型：<code>object</code> <code>function</code></li><li>获取类型：<code>Object.prototype.toString.call(arg)</code></li></ul><p>说明：<code>null</code> 属于基本类型，但 <code>typeof null === &#39;object&#39;</code></p><h3 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-label="Permalink to &quot;类型转换&quot;">​</a></h3><p>强制类型转换：使用数据类型对变量进行手动转换，如 <code>Number(&#39;123&#39;)</code> <br> 隐式类型转换：在运算时对错误的数据类型变量进行转换，如 <code>&#39;1&#39; + 1 === &#39;11&#39;</code> <br> 对象类型转换：在发生类型转换时会调用 <code>valueOf</code> 和 <code>toString</code> 方法</p><ul><li>当调用 <code>valueOf</code> 返回值为对象时，会继续调用 <code>toString()</code> 方法</li><li>使用强制类型转换 <code>String</code> 时会直接调用 <code>toString()</code> 方法</li><li>ES6 中可以覆写 <code>[Symbol.toPrimitive]</code> 替换 <code>valueOf</code> 和 <code>toString</code></li></ul><p>注意：</p><ul><li><code>valueOf</code> 和 <code>toString</code> 在基本类型变量中无效</li><li><code>if()</code> 和 <code>!</code> 在判断引用类型时不会发生类型转换</li><li><code>==</code> 需注意以下特殊比较 <ul><li><code>null == 0 // false</code>， 其中<code>+null</code> 为 <code>0</code></li><li><code>undefined == 0 // false</code>，其中 <code>+undefined</code> 为 <code>NaN</code></li><li><code>null == undefined // true</code></li></ul></li><li>字符串数字在进行 <code>&gt;</code>/<code>&lt;</code> 比较时是按位比较的</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">valueOf</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">调用 valueOf</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">233</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">toString</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">调用 toString</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">666</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 输出结果为 &quot;666&quot;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// NOTE: [Symbol.toPrimitive] 会覆盖 valueOf 和 toString</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// [Symbol.toPrimitive]() {</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//   return 2;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// },</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">obj </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">233</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 调用 valueOf true</span></span>
<span class="line"><span style="color:#82AAFF;">String</span><span style="color:#A6ACCD;">(obj)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 调用 toString &quot;666&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// [] 调用 valueOf 返回 []，再调用 toString 返回 &quot;&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ![] 不触发类型转换，直接返回 false</span></span>
<span class="line"><span style="color:#A6ACCD;">[] </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true     相当于 &quot;&quot; == false</span></span>
<span class="line"><span style="color:#A6ACCD;">[</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true   相当于 1 == true</span></span>
<span class="line"><span style="color:#A6ACCD;">[</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false  相当于 2 == true =&gt; 2 == Number(true) =&gt; 2 == 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false 基本类型，直接比较不发生类型转换</span></span>
<span class="line"><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false   null 属于基本类型</span></span></code></pre></div><h3 id="变量提升" tabindex="-1">变量提升 <a class="header-anchor" href="#变量提升" aria-label="Permalink to &quot;变量提升&quot;">​</a></h3><p>变量提升指先调用后声明的情况，js 代码在执行前会进行解析，<code>function</code> 和 <code>var</code> 声明的变量会提升到执行上下文的头部</p><ul><li>在解析阶段，<code>function</code> 声明的函数存入内存，在执行阶段会跳过赋值</li><li>在解析阶段，<code>var</code> 声明的变量会提升声明，需要在执行阶段才会赋值</li><li>同一作用域中变量提升的优先级高于父级作用域</li><li><code>let</code> 和 <code>const</code> 不会发生变量提升</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 输出 a 函数</span></span>
<span class="line"><span style="color:#82AAFF;">a</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &#39;a&#39;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">a</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a -&gt; a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">a</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// error</span></span></code></pre></div><h3 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-label="Permalink to &quot;闭包&quot;">​</a></h3><p>闭包是一个函数和对其周围状态(词法环境)的引用的组合；<br> 闭包可以让一个内层函数访问其外层函数的作用域 <br> 闭包最大的作用是隐藏变量，避免外部访问</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">timer</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">i</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">i</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="原型链" tabindex="-1">原型链 <a class="header-anchor" href="#原型链" aria-label="Permalink to &quot;原型链&quot;">​</a></h3><p>函数和类可以在其原型(<code>prototype</code>属性)上扩展方法和属性 <br> 在继承时，子类的 <code>__proto__</code> 指向父类的原型，自身通过 <code>prototype</code> 扩展原型方法和属性 <br> 在实例化时，实例的 <code>__proto__</code> 指向其类的 <code>prototype</code> <br> 在调用方法时会按照先自身、后递归向上查询原型方法的顺序执行 <br></p><h3 id="类" tabindex="-1">类 <a class="header-anchor" href="#类" aria-label="Permalink to &quot;类&quot;">​</a></h3><p>ES5</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Klass</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#FFCB6B;">Klass</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">showValue</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">Klass</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">showValue</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">static function</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>ES6</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Klass</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">showName</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">showName</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">static function</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>ES5 中的实例可以使用 <code>instance.constructor()</code> 调用构造函数 <br> ES6 中的实例不能使用 <code>instance.constructor()</code> 调用构造函数</p><h3 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-label="Permalink to &quot;继承&quot;">​</a></h3><p>ES5 (借用上面的 <code>Klass</code>)</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Child</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">child</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">Klass</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">child</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">child</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">Child</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__ </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">Klass</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">Child</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">constructor </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Child</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">Child</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">showChild</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">child</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>ES6(借用上面的 <code>Klass</code>)</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Child</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Klass</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">child</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">super</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">child</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">child</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">showChild</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">child</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="new-的过程" tabindex="-1">new 的过程 <a class="header-anchor" href="#new-的过程" aria-label="Permalink to &quot;new 的过程&quot;">​</a></h3><p><code>const ret = new Klass</code></p><ol><li>创建空对象</li><li>赋值原型链 <code>instance.__proto__ = Klass.prototype</code></li><li>调用构造函数</li><li>返回实例或构造函数返回值 <code>return isObjOrFn(ret) ? ret : instance</code></li></ol><h3 id="instanceof-的过程" tabindex="-1">instanceof 的过程 <a class="header-anchor" href="#instanceof-的过程" aria-label="Permalink to &quot;instanceof 的过程&quot;">​</a></h3><p><code>A instanceof B</code></p><ol><li>获取对象的 <code>__proto__</code></li><li>判断 <code>__proto__</code> 是否等于 <code>B.prototype</code></li><li>若不满足则向上遍历直到 <code>__proto__</code> 为 <code>null</code></li></ol><h3 id="this" tabindex="-1">this <a class="header-anchor" href="#this" aria-label="Permalink to &quot;this&quot;">​</a></h3><p>在不改变 <code>this</code> 指向的情况下，<code>this</code> 拥有指向最后调用它的对象 <br> 若找不到该对象，则默认为全局对象<br></p><p>改变 <code>this</code> 指向</p><ul><li>箭头函数：箭头函数中 <code>this</code> 指向函数所在上下文中的 <code>this</code></li><li><code>call</code>/\`\`apply<code>/</code>bind\`</li></ul><h3 id="模块" tabindex="-1">模块 <a class="header-anchor" href="#模块" aria-label="Permalink to &quot;模块&quot;">​</a></h3><p>CommonJS 模块</p><ul><li>基于函数实现</li><li>引入时会执行一次</li><li>再次引入会获取缓存</li></ul><p>ES6 模块</p><ul><li>引入时会执行一次</li><li>重复引用只执行一次</li><li>输出内容可以为接口</li><li>输出接口内容可以异步修改</li></ul><p>重要区别</p><ul><li>CommonJS 输出内容为值拷贝</li><li>ES6 输出内容为值引用</li></ul>`,129),p=[e];function t(c,r,i,y,F,D){return l(),a("div",null,p)}const A=s(n,[["render",t]]);export{C as __pageData,A as default};
