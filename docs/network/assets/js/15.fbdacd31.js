(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{291:function(_,v,t){"use strict";t.r(v);var a=t(10),s=Object(a.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"tcp"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp"}},[_._v("#")]),_._v(" TCP")]),_._v(" "),v("p",[_._v("TCP(传输控制协议)是一种面向连接的、可靠的、据域字节流的传输层通信协议")]),_._v(" "),v("h2",{attrs:{id:"头部信息"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#头部信息"}},[_._v("#")]),_._v(" 头部信息")]),_._v(" "),v("ul",[v("li",[_._v("source port: 16 位")]),_._v(" "),v("li",[_._v("destination port: 16 位")]),_._v(" "),v("li",[_._v("sequence number: 32 位，发生数据包中第一个字节的序列号")]),_._v(" "),v("li",[_._v("acknowledgment number: 32 位，确认序列号")]),_._v(" "),v("li",[_._v("date offset: 4 位，数据偏移，值=TCP 首部长度/4")]),_._v(" "),v("li",[_._v("标志位: 6 位\n"),v("ul",[v("li",[_._v("ACK: 表示 acknowledgment number 字段有意义")]),_._v(" "),v("li",[_._v("PSH: 表示 Push 功能")]),_._v(" "),v("li",[_._v("RST: 表示复位 TCP 连接")]),_._v(" "),v("li",[_._v("SYN: 表示 SYN 报文")]),_._v(" "),v("li",[_._v("FIN: 表示没有数据需要发送")])])]),_._v(" "),v("li",[_._v("window size: 16 位，表示接收缓存区的空闲空间")]),_._v(" "),v("li",[_._v("checksum: 16 位，校验和")]),_._v(" "),v("li",[_._v("urgent pointers: 16 位，紧急指针")])]),_._v(" "),v("h2",{attrs:{id:"状态控制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#状态控制"}},[_._v("#")]),_._v(" 状态控制")]),_._v(" "),v("p",[_._v("TCP 是面向连接的通信协议，在建立连接和终止连接时采用了三次握手和四次挥手的机制")]),_._v(" "),v("h3",{attrs:{id:"三次握手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三次握手"}},[_._v("#")]),_._v(" 三次握手")]),_._v(" "),v("p",[_._v("三次握手是请求方向响应方建立 TCP 连接的过程")]),_._v(" "),v("Mermaid",[_._v("sequenceDiagram\n  participant A as 请求方\n  participant B as 响应方\n  A --\x3e> B: SYN，seq=x\n  Note left of A: 进入 SYN_SEND 状态\n  B --\x3e> A: SYN+ACK，seq=y，ack=x+1\n  Note right of B: 进入 SYN_RCVD 状态\n  A --\x3e> B: ACK，seq=x+1，ack=y+1\n  Note left of A: 进入 ESTABLISHED 状态\n")]),v("p",[_._v("过程描述")]),_._v(" "),v("ol",[v("li",[_._v("请求方发送 SYN(seq=x) 报文给响应方，进入 SYN_SEND 状态")]),_._v(" "),v("li",[_._v("响应方接收 SYN 报文，返回 SYN(seq=y)+ACK(ack=x+1) 报文，进入 SYN_RECV 状态")]),_._v(" "),v("li",[_._v("请求方接收 SYN+ACK 报文，返回 ACK(ack=y+1) 报文，进入 ESTABLISHED 状态")])]),_._v(" "),v("h3",{attrs:{id:"四次挥手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#四次挥手"}},[_._v("#")]),_._v(" 四次挥手")]),_._v(" "),v("p",[_._v("四次挥手是请求方向响应方断开 TCP 连接的过程")]),_._v(" "),v("Mermaid",[_._v("sequenceDiagram\n  participant A as 请求方\n  participant B as 响应方\n  A --\x3e> B: FIN\n  Note left of A: 进入 FIN_WAIT_1 状态\n  B --\x3e> A: ACK\n  Note right of B: 进入 CLOSE_WAIT 状态\n  Note left of A: 进入 FIN_WAIT_2 状态\n  B --\x3e> A: FIN\n  Note right of B: 进入 LAST_ACT 状态\n  A --\x3e> B: ACK\n  Note left of A: 进入 TIME_WAIT 状态\n  Note right of B: 进入 CLOSED 状态\n  Note left of A: 经过 2MSL 时间后进入 CLOSED 状态\n")]),v("p",[_._v("过程描述")]),_._v(" "),v("ol",[v("li",[_._v("请求方数据发送完毕，发送 FIN 报文请求断开连接 (请求方可以接收数据)")]),_._v(" "),v("li",[_._v("响应方接收 FIN 报文，发送 ACK 报文，进入 CLOSE_WAIT 状态 (响应方可以发送数据)")]),_._v(" "),v("li",[_._v("响应方数据发送完毕，发送 FIN 报文表示数据发送完毕，进入 LAST_ACT 状态")]),_._v(" "),v("li",[_._v("请求方接收 FIN 报文，发送 ACK 报文，进入 TIME_WAIT 状态\n"),v("ul",[v("li",[_._v("响应方接收 ACK 报文后进入 CLOSED 状态")]),_._v(" "),v("li",[_._v("请求方经过 2MSL(最大生存期) 后若未接收到响应端请求，则进入 CLOSED 状态")])])])]),_._v(" "),v("p",[_._v("说明：第二次和第三次挥手可以合并发送")]),_._v(" "),v("h2",{attrs:{id:"传输控制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#传输控制"}},[_._v("#")]),_._v(" 传输控制")]),_._v(" "),v("h3",{attrs:{id:"超时重传"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#超时重传"}},[_._v("#")]),_._v(" 超时重传")]),_._v(" "),v("p",[_._v("超时重传(ARQ)机制用于确保数据正确送达，在发送报文段时会开启定时器并保留副本等待响应端回应")]),_._v(" "),v("ul",[v("li",[_._v("若在定时器时间内接收响应则取消定时器并删除副本")]),_._v(" "),v("li",[_._v("若发生超时，则重新发送报文直到成功")])]),_._v(" "),v("p",[_._v("重传超时时间(RTO)一般大于一个 RTT 的平均时间，由于传输距离与传输负载在传输时的差异，RTO 的设计通常采用自适应算法以适应不同的网络")]),_._v(" "),v("p",[_._v("建议 RTO = RTT~s~ + 4 × RTT~d~")]),_._v(" "),v("ul",[v("li",[_._v("RTT~s~: 加权平均往返时间")]),_._v(" "),v("li",[_._v("RTT~d~: 偏差的加权平均值")])]),_._v(" "),v("h3",{attrs:{id:"滑动窗口"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#滑动窗口"}},[_._v("#")]),_._v(" 滑动窗口")]),_._v(" "),v("p",[_._v("滑动窗口是一种流量控制技术，用于解决网络拥塞状态下的传输问题"),v("br")]),_._v(" "),v("h4",{attrs:{id:"工作流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#工作流程"}},[_._v("#")]),_._v(" 工作流程")]),_._v(" "),v("p",[_._v("窗口机制：在任意时刻，发送方与接收方各维持了一个连续的允许发送或接收帧的序号，称为发送窗口与接收窗口，发送窗口与接收窗口的需靠上下界和大小都可不同。")]),_._v(" "),v("p",[_._v("发送窗口按序号发送帧，发送窗口内若全部帧处于待确认状态则停止发送；"),v("br"),_._v("\n接收窗口按序号接收帧，接收后发送确认帧并向后滑动窗口"),v("br"),_._v("\n发送窗口接收到确认信息，从重发表删除对应帧并向后滑动窗口 "),v("br")]),_._v(" "),v("h4",{attrs:{id:"相关协议"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#相关协议"}},[_._v("#")]),_._v(" 相关协议")]),_._v(" "),v("p",[_._v("根据滑动窗口尺寸分为以下三种协议")]),_._v(" "),v("ul",[v("li",[_._v("停等协议：当发送窗口与接收擦黄口大小固定为 1 时，滑动窗口协议退化为停等协议\n"),v("ul",[v("li",[_._v("发送窗口=1；接收窗口=1")]),_._v(" "),v("li",[_._v("需要不停的等待应答帧，信道利用率低")])])]),_._v(" "),v("li",[_._v("后退 n 协议：发送方会连续发送若干数据帧，并对每个数据帧设置超时定时器，超时后将重发超时帧及后续帧\n"),v("ul",[v("li",[_._v("发送窗口>1；接收窗口=1")]),_._v(" "),v("li",[_._v("重传时需要重传错误帧及后续帧，在误码率较大场景下，传输效率依旧不高")])])]),_._v(" "),v("li",[_._v("选择重传协议：接收方对于错误帧后续的正确帧进行缓存并要求重传错误帧\n"),v("ul",[v("li",[_._v("发送窗口>1；接收窗口>1")]),_._v(" "),v("li",[_._v("减少了重发浪费，具有较高的传输效率，但要求接收方具有足够的缓冲空间")])])])]),_._v(" "),v("h4",{attrs:{id:"窗口大小"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#窗口大小"}},[_._v("#")]),_._v(" 窗口大小")]),_._v(" "),v("p",[_._v("TCP 连接阶段，双方协商窗口尺寸同时接收方预留数据缓存区"),v("br")]),_._v(" "),v("h3",{attrs:{id:"拥塞控制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#拥塞控制"}},[_._v("#")]),_._v(" 拥塞控制")]),_._v(" "),v("p",[_._v("网络拥塞是网络中某一资源的需求超过了该资源所能提供的可用部分造成网络性能变差的情况 "),v("br"),_._v("\nTCP 使用多种拥塞控制策略避免雪崩式拥塞")]),_._v(" "),v("ul",[v("li",[_._v("为每条连接维护一个 拥塞窗口 限制端到端传输的未确认分组总理")]),_._v(" "),v("li",[_._v("在连接初始化或超时后使用 慢启动 机制增加 拥塞窗口 的大小")])]),_._v(" "),v("h4",{attrs:{id:"核心概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#核心概念"}},[_._v("#")]),_._v(" 核心概念")]),_._v(" "),v("p",[_._v("拥塞窗口(cwnd)，由发送方维护，用于控制每次发送数据包的大小"),v("br"),_._v("\n最大分段大小(MSS，IPv4 为 536 字节，IPv6 为 1220 字节)，这里表示拥塞窗口大小的单位"),v("br"),_._v("\n慢启动门限(ssthresh)，拥塞窗口的最大值 "),v("br")]),_._v(" "),v("h4",{attrs:{id:"算法流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#算法流程"}},[_._v("#")]),_._v(" 算法流程")]),_._v(" "),v("ol",[v("li",[_._v("慢启动阶段：设置 cwnd 初值为 1/2/4/10 个 MSS，每次接收到确认包时翻倍增加，直至达到 ssthresh 或丢包等。")]),_._v(" "),v("li",[_._v("拥塞避免阶段：采用线增积减(AIMD)的反馈机制控制 cwnd 大小。cwnd 达到 ssthresh 时，若网络良好，每经过一个 RTT，cwnd 与 ssthresh += 1MSS；若网络拥塞(超时)，则 ssthresh 减半，cwnd 置 1MSS，进入慢启动阶段。")]),_._v(" "),v("li",[_._v("快速重传机制：TCP 在发送报文段时会开启超时计时器，当发送方收到 4 次相同的分段确认(假设重复阈值 3 次)，则认为可能出现丢包状态，发送方忽略超时计时器并立即重发，进入快速恢复阶段")]),_._v(" "),v("li",[_._v("快速恢复阶段：发送方将 cwnd 与 ssthresh 减半，随后进入拥塞避免阶段")])]),_._v(" "),v("p",[v("img",{attrs:{src:"/network/transport/TCP/%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6.png",alt:"拥塞控制流程"}})])],1)}),[],!1,null,null,null);v.default=s.exports}}]);