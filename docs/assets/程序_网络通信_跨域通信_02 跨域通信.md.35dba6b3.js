import{_ as e,o as l,c as i,V as o}from"./chunks/framework.bbae8ef5.js";const p=JSON.parse('{"title":"跨域通信","description":"","frontmatter":{},"headers":[],"relativePath":"程序/网络通信/跨域通信/02 跨域通信.md","filePath":"程序/网络通信/跨域通信/02 跨域通信.md","lastUpdated":1688401094000}'),a={name:"程序/网络通信/跨域通信/02 跨域通信.md"},t=o('<h1 id="跨域通信" tabindex="-1">跨域通信 <a class="header-anchor" href="#跨域通信" aria-label="Permalink to &quot;跨域通信&quot;">​</a></h1><h2 id="允许跨域通信" tabindex="-1">允许跨域通信 <a class="header-anchor" href="#允许跨域通信" aria-label="Permalink to &quot;允许跨域通信&quot;">​</a></h2><p>常见的跨域通信处理方式</p><ul><li>服务端请求：同源策略是 浏览器 行为，服务端不受影响 <ul><li>配置 nginx，或搭建本地服务</li><li>一般用于开发阶段</li></ul></li><li>JSONP：利用 <code>&lt;script&gt;</code> 允许跨源的特点，后端返回脚本字符串(<code>方法(数据)</code>)，前端加载后执行 <ul><li>一般用于访问第三方服务提供接口查询服务</li><li>只支持 get ，易受 XSS 攻击，存在安全问题</li></ul></li><li>postMessage：利用 H5 消息通信处理 父子页面交互 <ul><li>发送消息需要获取到目标源，<code>target.postMessage(message, origin)</code></li><li>接收消息需要监听全局事件，<code>window.addEventLister(&#39;message&#39;, e =&gt; { e.data })</code></li><li>通常用于内嵌 iframe 的场景，如 应用平台、H5 游戏平台、商户平台 等</li></ul></li><li>CORS：服务端设置允许跨域访问的规则 <ul><li>通过配置 <code>Access-Control-Allow-</code> 相关字段，允许跨域资源访问</li><li>常见字段有 <code>Origin</code>、<code>Methods</code>、<code>Headers</code>、<code>Credentials</code> 等</li><li>通常用于开发阶段、第三方服务商、项目域名迁移 等</li></ul></li><li>document.domain: 通过设置相同的二级域名，将跨域页面设置为同域 <ul><li>只能用于一二级域名相同的情况</li><li>如 <code>a.xxx.com</code> 和 <code>b.xxx.com</code>，设置 <code>document.domain = &#39;xxx.com&#39;</code></li></ul></li></ul><h2 id="阻止跨域访问" tabindex="-1">阻止跨域访问 <a class="header-anchor" href="#阻止跨域访问" aria-label="Permalink to &quot;阻止跨域访问&quot;">​</a></h2><ul><li>确保资源是不可嵌入的</li><li>检测 CSRF 标记</li></ul>',6),d=[t];function c(s,r,n,_,u,h){return l(),i("div",null,d)}const x=e(a,[["render",c]]);export{p as __pageData,x as default};
