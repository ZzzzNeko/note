import{_ as l,o as s,c as a,V as n}from"./chunks/framework.3b22bc79.js";const A=JSON.parse('{"title":"渲染引擎","description":"","frontmatter":{},"headers":[],"relativePath":"程序/工作原理/浏览器/渲染引擎.md","filePath":"程序/工作原理/浏览器/渲染引擎.md","lastUpdated":1687878294000}'),t={name:"程序/工作原理/浏览器/渲染引擎.md"},o=n(`<h1 id="渲染引擎" tabindex="-1">渲染引擎 <a class="header-anchor" href="#渲染引擎" aria-label="Permalink to &quot;渲染引擎&quot;">​</a></h1><p>浏览器通过渲染引擎解析并展示请求内容 <br> 主流的渲染引擎为 Webkit(Chrome) 与 Gecko(Firefox)，两者流程相似略有不同 <br> 渲染引擎主要用于处理 HTML 和 XML ，也可通过插件扩展其功能 <br></p><h2 id="工作流程" tabindex="-1">工作流程 <a class="header-anchor" href="#工作流程" aria-label="Permalink to &quot;工作流程&quot;">​</a></h2><p>渲染引擎从网络层获取请求文档的内容, 然后渐进的(无需等待全部解析)进行以下流程处理</p><ol><li>解析：解析 HTML 为 DOM 树，解析样式数据为样式规则</li><li>构建：根据 DOM 树与 样式规则，构建包含视觉属性的渲染树</li><li>布局：渲染树布局处理，为每个节点分配坐标信息</li><li>绘制：渲染树绘制处理，由用户界面后端层将节点进行绘制</li></ol><p>以下为 Webkit 与 Gecko 的主要流程，其使用术语略有不同，但整体流程大体相同。</p><div class="language-mermaid"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">flowchart</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">TD</span></span>
<span class="line"><span style="color:#A6ACCD;">  DT</span><span style="color:#89DDFF;font-style:italic;">[</span><span style="color:#C3E88D;">DOM Tree</span><span style="color:#89DDFF;font-style:italic;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">  SR</span><span style="color:#89DDFF;font-style:italic;">[</span><span style="color:#C3E88D;">Style Rules</span><span style="color:#89DDFF;font-style:italic;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">  RT</span><span style="color:#89DDFF;font-style:italic;">[</span><span style="color:#C3E88D;">Render Tree</span><span style="color:#89DDFF;font-style:italic;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  HTML </span><span style="color:#89DDFF;font-style:italic;">--&gt;</span><span style="color:#A6ACCD;"> HP</span><span style="color:#89DDFF;font-style:italic;">[</span><span style="color:#C3E88D;">HTML Parser</span><span style="color:#89DDFF;font-style:italic;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">--&gt;</span><span style="color:#A6ACCD;"> DT</span></span>
<span class="line"><span style="color:#A6ACCD;">  DOM </span><span style="color:#89DDFF;font-style:italic;">--&gt;</span><span style="color:#A6ACCD;"> DT</span></span>
<span class="line"><span style="color:#A6ACCD;">  S</span><span style="color:#89DDFF;font-style:italic;">[</span><span style="color:#C3E88D;">Style Sheets</span><span style="color:#89DDFF;font-style:italic;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">--&gt;</span><span style="color:#A6ACCD;"> CP</span><span style="color:#89DDFF;font-style:italic;">[</span><span style="color:#C3E88D;">CSS Parser</span><span style="color:#89DDFF;font-style:italic;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">--&gt;</span><span style="color:#A6ACCD;"> SR</span></span>
<span class="line"><span style="color:#A6ACCD;">  DT </span><span style="color:#89DDFF;font-style:italic;">--&gt;</span><span style="color:#A6ACCD;"> Attachment</span></span>
<span class="line"><span style="color:#A6ACCD;">  SR </span><span style="color:#89DDFF;font-style:italic;">--&gt;</span><span style="color:#A6ACCD;"> Attachment</span></span>
<span class="line"><span style="color:#A6ACCD;">  Attachment </span><span style="color:#89DDFF;font-style:italic;">--&gt;</span><span style="color:#A6ACCD;"> RT</span></span>
<span class="line"><span style="color:#A6ACCD;">  Layout </span><span style="color:#89DDFF;font-style:italic;">&lt;--&gt;</span><span style="color:#A6ACCD;"> RT</span></span>
<span class="line"><span style="color:#A6ACCD;">  RT </span><span style="color:#89DDFF;font-style:italic;">--&gt;</span><span style="color:#A6ACCD;"> Painting </span><span style="color:#89DDFF;font-style:italic;">--&gt;</span><span style="color:#A6ACCD;"> Display</span></span></code></pre></div><h5 style="text-align:center;">上图: webkit主流程</h5><div class="language-mermaid"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">flowchart</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">TD</span></span>
<span class="line"><span style="color:#A6ACCD;">  CS</span><span style="color:#89DDFF;font-style:italic;">[</span><span style="color:#C3E88D;">Content Sink</span><span style="color:#89DDFF;font-style:italic;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">  CM</span><span style="color:#89DDFF;font-style:italic;">[</span><span style="color:#C3E88D;">Content Model</span><span style="color:#89DDFF;font-style:italic;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">  FC</span><span style="color:#89DDFF;font-style:italic;">[</span><span style="color:#C3E88D;">Frame Constuctor</span><span style="color:#89DDFF;font-style:italic;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">  FT</span><span style="color:#89DDFF;font-style:italic;">[</span><span style="color:#C3E88D;">Frame Tree</span><span style="color:#89DDFF;font-style:italic;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  HTML </span><span style="color:#89DDFF;font-style:italic;">--&gt;</span><span style="color:#A6ACCD;"> Parser </span><span style="color:#89DDFF;font-style:italic;">--&gt;</span><span style="color:#A6ACCD;"> CS </span><span style="color:#89DDFF;font-style:italic;">--&gt;</span><span style="color:#A6ACCD;"> CM</span></span>
<span class="line"><span style="color:#A6ACCD;">  DOM </span><span style="color:#89DDFF;font-style:italic;">--&gt;</span><span style="color:#A6ACCD;"> CM</span></span>
<span class="line"><span style="color:#A6ACCD;">  CM </span><span style="color:#89DDFF;font-style:italic;">--&gt;</span><span style="color:#A6ACCD;"> FC</span></span>
<span class="line"><span style="color:#A6ACCD;">  CS </span><span style="color:#89DDFF;font-style:italic;">--&gt;</span><span style="color:#A6ACCD;"> SS</span><span style="color:#89DDFF;font-style:italic;">[</span><span style="color:#C3E88D;">Style Sheets</span><span style="color:#89DDFF;font-style:italic;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">--&gt;</span><span style="color:#A6ACCD;"> CP</span><span style="color:#89DDFF;font-style:italic;">[</span><span style="color:#C3E88D;">CSS Parser</span><span style="color:#89DDFF;font-style:italic;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">--&gt;</span><span style="color:#A6ACCD;"> SR</span><span style="color:#89DDFF;font-style:italic;">[</span><span style="color:#C3E88D;">Style Rules</span><span style="color:#89DDFF;font-style:italic;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">--&gt;</span><span style="color:#A6ACCD;"> FC</span></span>
<span class="line"><span style="color:#A6ACCD;">  Reflow </span><span style="color:#89DDFF;font-style:italic;">&lt;--&gt;</span><span style="color:#A6ACCD;"> FT</span></span>
<span class="line"><span style="color:#A6ACCD;">  FC </span><span style="color:#89DDFF;font-style:italic;">--&gt;</span><span style="color:#A6ACCD;"> FT </span><span style="color:#89DDFF;font-style:italic;">--&gt;</span><span style="color:#A6ACCD;"> Painting </span><span style="color:#89DDFF;font-style:italic;">--&gt;</span><span style="color:#A6ACCD;"> Display</span></span></code></pre></div><h5 style="text-align:center;">上图: gecko主流程</h5><h2 id="解析流程" tabindex="-1">解析流程 <a class="header-anchor" href="#解析流程" aria-label="Permalink to &quot;解析流程&quot;">​</a></h2><ol><li>解析：文档 -&gt; 词法分析 -&gt; 语法分析 -&gt; 解析树</li><li>翻译：解析树--&gt; 翻译 --&gt; 机器码</li></ol><p>Webkit 在实现解析器时使用了用于创建词法分析器的 Flex 和用于创建语法解析器的 Bison</p><h3 id="html-解析" tabindex="-1">HTML 解析 <a class="header-anchor" href="#html-解析" aria-label="Permalink to &quot;HTML 解析&quot;">​</a></h3><p>HTML 的定义采用 DTD(文档类型定义) 格式，包括所有允许使用的元素及其属性和层次结构的定义，无法构成与上下文无关的语法，因而无法使用常规的自上而下或自下而上的解析器解析</p><p>解析树是由 DOM 元素和属性节点构成的树结构；DOM 是文档的对象表示，也是外部内容(如 JS)与 HTML 元素之间的接口</p><p>解析算法：标记化和树构建</p><ul><li>标记化：词法分析过程，将输入内容解析为多个标记</li><li>构建树：在接收到标记时创建对应的 DOM 元素添加到 DOM 树及开放元素的堆栈中(用于纠正嵌套错误和处理为未关闭标记)</li></ul><p>HTML 解析过程中会对错误标签进行纠错，解析结束后，文档进入交互状态，并开始解析 &quot;deferred&quot; 模式的脚本</p><h3 id="css-解析" tabindex="-1">CSS 解析 <a class="header-anchor" href="#css-解析" aria-label="Permalink to &quot;CSS 解析&quot;">​</a></h3><p>CSS 是上下文无关的语法，使用 Flex 和 Bison 解析器生成器，通过 CSS 语法文件自动生成解析器。</p><h3 id="脚本处理与样式表顺序" tabindex="-1">脚本处理与样式表顺序 <a class="header-anchor" href="#脚本处理与样式表顺序" aria-label="Permalink to &quot;脚本处理与样式表顺序&quot;">​</a></h3><ul><li>脚本 <ul><li>同步脚本: 当遇到 <code>&lt;script&gt;</code> 标签时优先执行脚本并暂停文档解析 <ul><li>内部脚本: 直接执行脚本</li><li>外部脚本: 等待资源加载完毕后解析和执行</li></ul></li><li>异步脚本: 不会停止文档解析 <ul><li>defer 标记: 延迟加载，有序执行</li><li>async 标记: 异步加载，无序执行</li></ul></li></ul></li><li>预解析 <ul><li>执行脚本时, 其他线程会解析文档的其他内容, 找出并加载需要通过网络加载的其他资源</li><li>这里的预解析只会解析外部资源的引用, 不会修改 DOM 树</li></ul></li><li>样式表 <ul><li>样式表加载不阻塞 DOM 树解析</li><li>样式表加载会阻塞 DOM 树渲染</li><li>样式表加载会阻塞脚本运行</li><li>样式表解析时对脚本的阻塞(原文说加载和解析过程, 测试发现加载时都会阻塞) <ul><li>Gecko: 样式表在加载和解析时会禁止脚本</li><li>Webkit: 仅当脚本尝试访问的样式属性可能受未加载的样式表影响时会禁止脚本</li></ul></li></ul></li></ul><h2 id="构建流程" tabindex="-1">构建流程 <a class="header-anchor" href="#构建流程" aria-label="Permalink to &quot;构建流程&quot;">​</a></h2><p>渲染树(Gecko 中称为 框架树)是可视化元素按照其显示顺序组成的树，用于渲染器进行布局和绘制<br> 渲染树与 DOM 元素是相对的(非一一对应)，非可视化的 DOM 元素不会插入渲染树中(如 <code>head</code> 标签的元素，<code>display: none</code> 属性的元素)</p><p>每一个渲染器都代表一个矩形区域(对应 CSS 盒子)，框的类型受 <code>display</code> 属性影响<br> 部分元素可能具有多个渲染器(如 <code>select</code>)</p><p>构建</p><ul><li>创建渲染器/框架 <ul><li>Gerko：由 FrameConstructor 构造解析样式并创建框架</li><li>Webkit：在节点插入 DOM 树时调用 attach 方法</li></ul></li><li>处理 html 和 body 标记时会创建渲染树根节点，其尺寸即视口 <ul><li>Gerko：ViewPortFrame</li><li>Webkit：RenderView</li></ul></li></ul><p>样式计算(TODO:)</p><h2 id="布局流程" tabindex="-1">布局流程 <a class="header-anchor" href="#布局流程" aria-label="Permalink to &quot;布局流程&quot;">​</a></h2><p>文档采用流的布局模型，大多数情况下只需一次遍历即可计算出集合信息(少数情况如表格等)<br> 文档流中位置靠后的元素通常不会影响位置考前的元素，因此通常布局按照从左往右，从上往下的顺序遍历文档<br></p><p>dirty 位：避免因细小改动进行整体布局</p><ul><li>若渲染器变化或将自身及子代标注为 &#39;dirty&#39;,则需要进行布局</li><li><code>children are ditty</code>：表示渲染器至少一个子代需要布局</li></ul><p>全局布局和增量布局</p><ul><li>全局布局：触发了整个渲染树的布局 <ul><li>全局样式修改影响了全部的渲染器</li><li>屏幕大小调整</li></ul></li><li>增量布局：只对 dirty 渲染器进行布局(可能存在需要额外布局的弊端)</li></ul><p>异步布局和同步布局</p><ul><li>增量布局是异步执行的</li><li>全局布局通常是同步执行的</li></ul><p>布局处理</p><ol><li>父渲染器确认自身宽度</li><li>父渲染器依次处理子渲染器 i. 放置子渲染器(设置 xy 坐标) ii. 调用子渲染器布局，计算子渲染器高度</li><li>父渲染器根据子渲染器累加高度以及边距等设置自身高度</li><li>将 dirty 位设为 false</li></ol><h2 id="绘制流程" tabindex="-1">绘制流程 <a class="header-anchor" href="#绘制流程" aria-label="Permalink to &quot;绘制流程&quot;">​</a></h2><p>系统遍历渲染树，并调用渲染器的 <code>paint</code> 方法<br> 绘制工作借助用户界面基础组件完成 <br> 与布局流程一样，绘制流程分为全局绘制和增量绘制 <br></p><p>绘制顺序</p><ol><li>背景颜色</li><li>背景图片</li><li>边框</li><li>子代</li><li>轮廓</li></ol><h2 id="动态变化-回流重绘" tabindex="-1">动态变化(回流重绘) <a class="header-anchor" href="#动态变化-回流重绘" aria-label="Permalink to &quot;动态变化(回流重绘)&quot;">​</a></h2><p>当元素发生变化时，浏览器会尽可能做出最小的响应；<br> 当元素表现样式发生变动时，只触发对应元素的重绘；<br> 当元素位置或大小变动时，只触发元素及子元素(可能有同级元素)进行布局和重绘；<br> 全局重大样式变动(如字体、box-sizing 等)导致位置缓存无效，将触发整个渲染树的布局和重绘。<br></p><p>触发回流的行为</p><ul><li>页面首次渲染</li><li>窗口尺寸变动</li><li>增减可视元素</li><li>元素尺寸变动</li><li>元素位置变动</li><li>元素内容变动</li><li>元素属性获取</li></ul><p>说明：</p><ul><li>回流、布局 表示 Layout 流程</li><li>重绘、绘制 表示 Paint 流程</li></ul>`,49),e=[o];function p(i,c,r,D,y,C){return s(),a("div",null,e)}const d=l(t,[["render",p]]);export{A as __pageData,d as default};
