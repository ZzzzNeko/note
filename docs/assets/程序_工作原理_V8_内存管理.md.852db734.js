import{_ as a,o as e,c as i,V as l}from"./chunks/framework.9dc355db.js";const _=JSON.parse('{"title":"内存管理","description":"","frontmatter":{},"headers":[],"relativePath":"程序/工作原理/V8/内存管理.md","filePath":"程序/工作原理/V8/内存管理.md","lastUpdated":1688232483000}'),r={name:"程序/工作原理/V8/内存管理.md"},o=l('<h1 id="内存管理" tabindex="-1">内存管理 <a class="header-anchor" href="#内存管理" aria-label="Permalink to &quot;内存管理&quot;">​</a></h1><p>内存数据管理</p><ul><li>原始数据类型存储在栈内存中，由操作系统管理</li><li>引用数据类型存储在堆内存中，由 V8 引擎管理(注：闭包中的基本类型也是存放在堆中的)</li></ul><h2 id="声明周期" tabindex="-1">声明周期 <a class="header-anchor" href="#声明周期" aria-label="Permalink to &quot;声明周期&quot;">​</a></h2><ol><li>分配所需内存</li><li>使用分配内存(读写)</li><li>释放归还内存</li></ol><p>内存的分配和释放在底层语言中可以显性控制(如 c 语言 <code>malloc()</code> 与 <code>free()</code>)，在大部分高级语言中为隐性处理；<br> 大部分高级语言中，在变量声明时就完成了内存分配，而内存的释放则由垃圾回收器调控 <br> 内存的使用在所有语言中都是显性控制的，如对变量的读写</p><h2 id="内存构成" tabindex="-1">内存构成 <a class="header-anchor" href="#内存构成" aria-label="Permalink to &quot;内存构成&quot;">​</a></h2><ul><li>新生代内存区：</li><li>老生代内存区</li><li>大对象区</li><li>代码区</li><li>Map 区</li></ul><p>每个区域都由 内存页 组成(内存管理的最小单位)，除了大对象区，其他区域内存页大小为 1MB 大对象区、代码区、Map 区属于老生代区</p><p>64 位环境下：新生代内存默认最大 32MB，老生代内存默认最大 1.4GB 32 位环境下：新生代内存默认最大 16MB，老生代内存默认最大 700MB</p><p>垃圾回收器</p><ul><li>副垃圾回收器(Minor GC)：用于新生代内存</li><li>主垃圾回收器(Mahor GC)：用于整个堆，包括新生代和老生代</li></ul><h2 id="全停顿" tabindex="-1">全停顿 <a class="header-anchor" href="#全停顿" aria-label="Permalink to &quot;全停顿&quot;">​</a></h2><p>全停顿(Stop-The-World)：V8 在 GC[^1] 时会阻塞 JS 执行(避免 JS 修改正在 GC 的对象)，耗时 1s 以上</p><p>新生代 GC 中，存活对象少，GC 效率高，全停顿时间短 <br> 老生代 GC 中，存活对象多，GC 效率低，全停顿时间长 <br> V8 对老生代 GC 采取了增量标记，将一次听到的标记过程进行分步，减少了最大停顿时间</p><h2 id="新生代-gc" tabindex="-1">新生代 GC <a class="header-anchor" href="#新生代-gc" aria-label="Permalink to &quot;新生代 GC&quot;">​</a></h2><p>新生代内存等分为两块区域(Semi-Space)，分别为 From-Space 与 To-Space；<br> From-Space 是真正使用的内容，To-Space 是空闲的，在 GC 时使用 <br> From-Space 又分为 Nursery 和 Intermediate 两块区域，对象第一次分配时在 Nursery，GC 后转移到 Intermediate <br></p><p>副垃圾回收器 使用了清道夫算法(Scavenge)，其实现使用了 Cheney 算法</p><ol><li>广度优先遍历 From-Space 中的对象，将存活的对象复制到 To-Space</li><li>遍历完成后，清空 From-Space</li><li>From-Space 与 To-Space 角色互换</li></ol><p>新生代中部分对象会转移到老生代中</p><ul><li>经过一次 GC 后存活的对象，即 Intermediate 区域</li><li>对象复制到 To-Space 时，To-Space 空间使用 25% 以上</li></ul><h2 id="老生代-gc" tabindex="-1">老生代 GC <a class="header-anchor" href="#老生代-gc" aria-label="Permalink to &quot;老生代 GC&quot;">​</a></h2><p>老生代内存分为两块区域，分别为指针区与数据区</p><p>主垃圾回收器 使用了 标记、清除、整理 的方式进行 GC</p><h3 id="标记-marking-清除-sweeping" tabindex="-1">标记(Marking)清除(Sweeping) <a class="header-anchor" href="#标记-marking-清除-sweeping" aria-label="Permalink to &quot;标记(Marking)清除(Sweeping)&quot;">​</a></h3><p>标记清除是常用的 GC 机制 <br> 当变量进入环境时，将该变量标记为 进入环境 ，进入环境 的变量不能释放 <br> 当变量离开环境时，将该变量标记为 离开环境 <br></p><p>系统使用三色进行标记</p><ul><li>值 00，表示 白色，未被引用</li><li>值 10，表示 灰色，已被引用，其引用对象未遍历完成</li><li>值 11，表示 黑色，已被引用，其引用对象已遍历完成</li></ul><p>开始，所有对象标记为白色，然后从根集开始，已深度优先遍历的方式将访问到的对象进行标记</p><p>遍历结束之后，清除标记仍为白色的对象（将内存地址标记为空闲），会造成内存空不连续的情况</p><h3 id="内存整理-compacting" tabindex="-1">内存整理(Compacting) <a class="header-anchor" href="#内存整理-compacting" aria-label="Permalink to &quot;内存整理(Compacting)&quot;">​</a></h3><p>修改仍存活的对象的内存地址，将不同内存页上的对象进行整合，使内存空间紧凑<br> 该操作常发生在剩余空间不足以存放新晋对象或内存页高度分散等状况<br> 对于引用次数过多的对象对跳过整理以免影响性能</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Memory_Management" target="_blank" rel="noreferrer">内存管理</a></p>',34),t=[o];function p(c,n,h,d,s,m){return e(),i("div",null,t)}const b=a(r,[["render",p]]);export{_ as __pageData,b as default};
