import{_ as e,o as l,c as i,V as t}from"./chunks/framework.bbae8ef5.js";const m=JSON.parse('{"title":"快速开始","description":"","frontmatter":{},"headers":[],"relativePath":"程序/项目管理/打包工具 - vite/快速开始.md","filePath":"程序/项目管理/打包工具 - vite/快速开始.md","lastUpdated":1687958817000}'),o={name:"程序/项目管理/打包工具 - vite/快速开始.md"},a=t('<h1 id="快速开始" tabindex="-1">快速开始 <a class="header-anchor" href="#快速开始" aria-label="Permalink to &quot;快速开始&quot;">​</a></h1><h2 id="启动项目" tabindex="-1">启动项目 <a class="header-anchor" href="#启动项目" aria-label="Permalink to &quot;启动项目&quot;">​</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">create</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">vite</span></span></code></pre></div><p>说明</p><ul><li><code>npm create vite</code> 实际调用的是 <code>create-vite</code></li><li><code>npm create</code> 是 <code>npm init</code> 的别名</li><li><code>npm init &lt;initializer&gt;</code> 相当于 <code>npm exec &lt;create-initializer&gt;</code><ul><li>这里 <code>create</code> 是固定前缀</li><li>npm init @scope/init -&gt; npm init @scope/create-init</li><li>npm init @scope -&gt; npm init @scope/create</li></ul></li></ul><h2 id="特点介绍" tabindex="-1">特点介绍 <a class="header-anchor" href="#特点介绍" aria-label="Permalink to &quot;特点介绍&quot;">​</a></h2><ul><li>冷启动：无 bundle + esbuild 预构建</li><li>模块热更新</li><li>真实按需加载</li></ul><h2 id="原理介绍" tabindex="-1">原理介绍 <a class="header-anchor" href="#原理介绍" aria-label="Permalink to &quot;原理介绍&quot;">​</a></h2><p>vite 对应用中的模块区分为 依赖(需要预构建) 和 源码(加载时转换)，并基于 ESM 进行模块加载</p><ul><li>预构建：服务启动后会对 <code>node_modules</code> 内容进行预编译(基于 esbuild, 速度极快)，以提高加载效率 <ul><li>对依赖模块统一化处理，转换为 ESM (兼容 CommonJS 和 UMD)</li><li>对多个子模块进行合并，减少请求数(如 lodash)</li><li>预编译后，对应文件将缓存在 <code>node_modules/.vite/</code> 下</li><li>只有当 package.json 依赖和 lockfile 依赖调整时才会重新预构建</li><li>若存在本地依赖包，需要删除 node_modules/.vite/ 文件夹或使用 vite --force 启动开发服务器</li></ul></li><li>加载流程：利用 <code>&lt;script type=&quot;module&quot; src=&quot;xxx&quot; /&gt;</code> 实现按需模块化加载 <ol><li>浏览器在加载入口文件后，遇到内部 import 引入的包，则会发起对应的 HTTP 请求，</li><li>vite 会启动 koa 服务拦截对应地址的请求</li><li>服务端对源码资源处理转换后再以 ESM 格式返回给浏览器</li></ol></li><li>热更新：监听文件系统变更(使用 <code>chokidar</code>)并通知浏览器 <ul><li>通过 websocket 建立浏览器与服务器的通信</li><li>本地服务监听文件的修改</li><li>文件修改时服务器通知浏览器进行对应的更新</li></ul></li></ul><p>补充说明：生产环境使用 rollup 进行打包</p><ul><li>esbuild 对 css 和 code split 不友好</li><li>rollup 生态更加成熟且灵活</li><li>生产环境构建对速度要求一般</li></ul>',12),c=[a];function s(n,d,r,p,u,_){return l(),i("div",null,c)}const b=e(o,[["render",s]]);export{m as __pageData,b as default};
