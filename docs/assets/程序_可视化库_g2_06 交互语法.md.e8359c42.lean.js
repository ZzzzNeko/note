import{_ as s,v as n,b as a,R as l}from"./chunks/framework.ecc14119.js";const A=JSON.parse('{"title":"交互","description":"","frontmatter":{},"headers":[],"relativePath":"程序/可视化库/g2/06 交互语法.md","filePath":"程序/可视化库/g2/06 交互语法.md","lastUpdated":1691395408000}'),t={name:"程序/可视化库/g2/06 交互语法.md"},o=l(`<h1 id="交互" tabindex="-1">交互 <a class="header-anchor" href="#交互" aria-label="Permalink to &quot;交互&quot;">​</a></h1><h2 id="交互语法" tabindex="-1">交互语法 <a class="header-anchor" href="#交互语法" aria-label="Permalink to &quot;交互语法&quot;">​</a></h2><h3 id="交互使用" tabindex="-1">交互使用 <a class="header-anchor" href="#交互使用" aria-label="Permalink to &quot;交互使用&quot;">​</a></h3><ul><li><code>registerInteraction(name: string, cfg: InteractionSteps | InteractionConstructor)</code>: 注册交互</li><li><code>chart.interaction(name: string, cfg?: InteractionSteps)</code>: 使用交互，或配置交互</li><li><code>chart.removeInteraction(name: string)</code>: 移除交互</li></ul><h3 id="交互配置" tabindex="-1">交互配置 <a class="header-anchor" href="#交互配置" aria-label="Permalink to &quot;交互配置&quot;">​</a></h3><p>一个交互可由多个<strong>交互环节</strong>组成，每个<strong>交互环节</strong>可有多个<strong>触发</strong>和<strong>反馈</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 交互过程，包含多个交互环节: 示能、开始、持续、结束、回滚</span></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">InteractionSteps</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">showEnable</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">InteractionStep</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 示能(显示交互可以进行)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">start</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">InteractionStep</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 开始</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">processing</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">InteractionStep</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 持续</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">end</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">InteractionStep</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 结束</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">rollback</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">InteractionStep</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 回滚</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 交互环节，包含 触发 和 反馈 等</span></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">InteractionStep</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * 触发事件，支持 view，chart 的各种事件，也支持 document、window 的事件</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * 格式: [对象]:[事件]，如 \`mask:mouseenter\`</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">trigger</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * 反馈，包括反馈对象与结果，可以配置多个或回调函数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * 格式：[反馈对象]:[响应方法]，如 \`mask:hide\`</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">action</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">[] </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ActionCallback</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">isEnable</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">context</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IInteractionContext</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 是否可以触发 action</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">arg</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 具体 action method 的参数，多个 action 时，args 必须是一个数组</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">callback</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">context</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IInteractionContext</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 回调函数，action 执行后执行</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">actionObject</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ActionObject</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ActionObject</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 内部属性，不需要用户传入，通过上面的属性计算出来的属性</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">once</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 在一个环节内是否只允许执行一次</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">throttle</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ThrottleOption</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 是否增加节流</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">debounce</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DebounceOption</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 是否延迟</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 上下文信息：包括当前进行交互及交互步骤信息、当前对象、容器的状态</span></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IInteractionContext</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">LooseObject</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">event</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">LooseObject</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 事件对象</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">view</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">View</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 当前的 view</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">actions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IAction</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 交互相关的 Actions</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">cache</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 缓存属性，用于上下文传递信息</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">getAction</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IAction</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 获取 action</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">getCurrentPoint</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Point</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 获取当前的点</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">getCurrentShape</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IShape</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 获取当前的图形</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">addAction</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">action</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IAction</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 添加 action</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">removeAction</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">action</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IAction</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 移除 action</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">isInPlot</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 事件触发时是否在 view 内部</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">isInComponent</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 是否在组件的包围盒内</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">isInShape</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 是否在指定的图形内</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">destroy</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 销毁</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="规格描述" tabindex="-1">规格描述 <a class="header-anchor" href="#规格描述" aria-label="Permalink to &quot;规格描述&quot;">​</a></h3><p>触发(Trigger)：由 <code>对象:事件</code> 组成(如 <code>area:click</code>)，对象有以下三种</p><ul><li>容器 <ul><li>图表: chart</li><li>子视图: view</li><li>容器的状态量: selectedElements, cursorInfo 等</li></ul></li><li>元素 <ul><li>元素名称: interval, line, point, area 等</li><li>元素内部图形元素名称: line-label, point-label 等</li></ul></li><li>组件 <ul><li>组件名称: legend, axis, annotation</li><li>组件的组成部分: legend-item, annotation-line</li></ul></li></ul><p>反馈(Action)</p><ul><li>对象：Action 对 Trigger 进行相应，反馈的对象必须与触发关联 <ul><li>可以是之前触发的对象</li><li>可以是位置信息计算出的对象</li><li>可以是触发对象关联的其他对象</li></ul></li><li>结果: 在回调函数中指定或事先定义后在交互语法中使用 Action 名称</li></ul><p>上下文(Context): 在 Trigger 和 Action 之间需要上下文，包括</p><ul><li>view、chart 上的全局状态量 <ul><li>size</li><li>cursorPoint</li><li>currentShape, currentElement, currentComponent, currentView 等根据鼠标位置推导出的信息</li><li>activeElements, selectedElements, xxxStateElements 等跟状态量相关的 Element</li><li>自定义的状态量</li></ul></li><li>交互过程中各个环节需要共享的信息 <ul><li>当前交互的 ID</li><li>当前交互执行到的环节</li><li>执行完毕的环节传递给后续环节的信息</li></ul></li></ul><h3 id="内置交互" tabindex="-1">内置交互 <a class="header-anchor" href="#内置交互" aria-label="Permalink to &quot;内置交互&quot;">​</a></h3><table><thead><tr><th>名称</th><th>描述</th><th>其他</th></tr></thead><tbody><tr><td>tooltip</td><td>鼠标移动时展示 提示信息</td><td> </td></tr><tr><td>active-region</td><td>鼠标在画布上移动时对应位置的分类出现背景框</td><td> </td></tr><tr><td>view-zoom</td><td>鼠标滚动时，图表内部缩放，需要配置 throttle</td><td> </td></tr><tr><td>element-active</td><td>鼠标移入图表元素时触发 active</td><td> </td></tr><tr><td>element-selected</td><td>点击选中图表元素、再次点击取消，允许多选</td><td> </td></tr><tr><td>element-single-selected</td><td>单选图表元素，下次点击允许取消</td><td> </td></tr><tr><td>element-highlight</td><td>图表元素高亮</td><td> </td></tr><tr><td>element-highlight-by-x</td><td>图表高亮 x 值相同的元素，用于分组场景</td><td> </td></tr><tr><td>element-highlight-by-color</td><td>高亮颜色相同的元素，用于层叠场景</td><td> </td></tr><tr><td>legend-active</td><td>鼠标移动到分类图例时，图例及对应图形状态 active</td><td> </td></tr><tr><td>legend-highlight</td><td>鼠标移动到分类图例时，图例及对应图形高亮</td><td> </td></tr><tr><td>legend-filter</td><td>分类图例过滤，对应图形隐藏/显示，重新计算坐标</td><td> </td></tr><tr><td>legend-visible-filter</td><td>分类图表过滤，对应图形隐藏/显示，不引起坐标变化</td><td>需要先移除 <code>legend-filter</code></td></tr><tr><td>continuous-filter</td><td>连续图例过滤</td><td> </td></tr><tr><td>contiuous-visible-filter</td><td>连续图例过滤，不引起坐标轴变化</td><td>需要先移除 <code>continuous-filter</code></td></tr><tr><td>axis-label-highlight</td><td>坐标轴文本高亮，对应图表元素高亮</td><td> </td></tr><tr><td>element-list-highlight</td><td>鼠标触发图表元素高亮，对应列表组件高亮</td><td> </td></tr><tr><td>brush</td><td>框选过滤图形</td><td> </td></tr><tr><td>brush-x</td><td>框选过滤，仅过滤 x 轴相关数据</td><td> </td></tr><tr><td>brush-y</td><td>框选过滤，仅过滤 y 轴相关数据</td><td> </td></tr><tr><td>brush-visible</td><td>框选仅过滤图形不过滤数据</td><td> </td></tr></tbody></table>`,17),p=[o];function e(c,r,y,i,C,D){return n(),a("div",null,p)}const d=s(t,[["render",e]]);export{A as __pageData,d as default};
