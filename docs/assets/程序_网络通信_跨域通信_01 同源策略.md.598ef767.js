import{_ as a,v as o,b as l,R as s}from"./chunks/framework.f165b36f.js";const D=JSON.parse('{"title":"同源策略","description":"","frontmatter":{},"headers":[],"relativePath":"程序/网络通信/跨域通信/01 同源策略.md","filePath":"程序/网络通信/跨域通信/01 同源策略.md","lastUpdated":1688401094000}'),e={name:"程序/网络通信/跨域通信/01 同源策略.md"},t=s(`<h1 id="同源策略" tabindex="-1">同源策略 <a class="header-anchor" href="#同源策略" aria-label="Permalink to &quot;同源策略&quot;">​</a></h1><p>同源策略是<strong>浏览器</strong>对跨源资源请求的一种安全策略，<br> 用于限制从一个源加载的文档和脚本与不同源的资源进行交互。<br> (浏览器并不阻止请求的发送，而是对请求进行拦截)</p><h2 id="同源定义" tabindex="-1">同源定义 <a class="header-anchor" href="#同源定义" aria-label="Permalink to &quot;同源定义&quot;">​</a></h2><p>同源需要同时满足：同协议、同域名、同端口</p><p>如 &#39;<a href="http://www.abc.com" target="_blank" rel="noreferrer">http://www.abc.com</a>&#39; 与 &#39;<a href="http://www.abc.com/some/dir" target="_blank" rel="noreferrer">http://www.abc.com/some/dir</a>&#39; 同源</p><p>而 &#39;<a href="https://xx.abc.com" target="_blank" rel="noreferrer">https://xx.abc.com</a>&#39; 与 &#39;<a href="http://oo.abc.com" target="_blank" rel="noreferrer">http://oo.abc.com</a>&#39; 在以下方面不符合同源条件</p><ul><li>&#39;https&#39; 与 &#39;http&#39; 为不同的协议</li><li>&#39;xx.abc.com&#39; 与 &#39;oo.abc.com&#39; 为不同域名</li><li>&#39;https&#39; 默认 443 端口，&#39;http&#39; 默认 80 端口</li></ul><h2 id="源的更改" tabindex="-1">源的更改 <a class="header-anchor" href="#源的更改" aria-label="Permalink to &quot;源的更改&quot;">​</a></h2><p>可以通过脚本将 <code>document.domain</code> 设置为当前与或其当前域的父域，如</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">domain</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// =&gt; home.xxx.com</span></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">domain </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">xxx.com</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// ok</span></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">domain </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">note.xxx.com</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// error</span></span></code></pre></div><h2 id="访问限制" tabindex="-1">访问限制 <a class="header-anchor" href="#访问限制" aria-label="Permalink to &quot;访问限制&quot;">​</a></h2><p>同源策略对存储数据访问进行控制</p><ul><li>对于 localStorage 和 indexedDB <ul><li>按源分隔</li><li>禁止跨源读写操作</li></ul></li><li>对于 cookies <ul><li>页面可以为本域和任何父域设置 cookie</li><li>不限制协议和端口号</li><li>可以使用 domian, path, secure, http-only 等限制访问性</li><li>读取 cookie 时无法获取其具体来源</li></ul></li></ul><p>同源策略对跨源访问进行控制</p><ul><li>通常允许跨源写操作，如链接、重定向以及表单提交</li><li>通常允许跨源资源嵌入，如 <code>&lt;script&gt;</code>, <code>css</code>, <code>&lt;img&gt;</code>, <code>&lt;video&gt;</code>, <code>@font-face</code>, <code>&lt;iframe&gt;</code></li><li>通常禁止跨源读操作</li></ul><h2 id="跨源攻击" tabindex="-1">跨源攻击 <a class="header-anchor" href="#跨源攻击" aria-label="Permalink to &quot;跨源攻击&quot;">​</a></h2><p>假设没有同源策略，则会有以下安全问题</p><ul><li>钓鱼网站：通过内嵌 iframe 页面仿造钓鱼页面获取用户信息</li><li>cookie 泄漏</li></ul>`,18),n=[t];function c(r,p,i,d,h,m){return o(),l("div",null,n)}const y=a(e,[["render",c]]);export{D as __pageData,y as default};
