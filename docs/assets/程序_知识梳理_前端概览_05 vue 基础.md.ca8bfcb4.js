import{_ as s,o as a,c as l,V as n}from"./chunks/framework.9dc355db.js";const C=JSON.parse('{"title":"vue 基础","description":"","frontmatter":{},"headers":[],"relativePath":"程序/知识梳理/前端概览/05 vue 基础.md","filePath":"程序/知识梳理/前端概览/05 vue 基础.md","lastUpdated":1690548711000}'),o={name:"程序/知识梳理/前端概览/05 vue 基础.md"},e=n('<h1 id="vue-基础" tabindex="-1">vue 基础 <a class="header-anchor" href="#vue-基础" aria-label="Permalink to &quot;vue 基础&quot;">​</a></h1><h2 id="描述组件" tabindex="-1">描述组件 <a class="header-anchor" href="#描述组件" aria-label="Permalink to &quot;描述组件&quot;">​</a></h2><h3 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h3><p>vue2 生命周期</p><ul><li><code>beforeCreate</code>: 组件创建之前 (初始化 默认事件和生命周期，此时组件 data 和 methods 未创建)</li><li><code>created</code>: 组件创建完成 (初始化 注入和反射，此时组件 data 和 methods 已创建)</li><li><code>beforeMount</code>: 组件挂载之前 (将模板编译为渲染函数，渲染函数用于生成 VNode)</li><li><code>mounted</code>: 组件挂载完毕 (将组件挂载为真实 DOM)</li><li><code>beforeUpdate</code>: 组件更新之前 (数据变更之前)</li><li><code>updated</code>: 组件更新完毕 (更新 VNode 并进行 patch)</li><li><code>beforeDestory</code>: 组件销毁之前 (组件销毁之前)</li><li><code>destoryed</code>: 组件销毁之后 (卸载 数据、方法、监听器、观察器、子组件)</li><li><code>activated</code>: 被 keep-alive 缓存的组件激活</li><li><code>deactivated</code>: 被 keep-alive 缓存的组件停用</li><li><code>errorCaptured</code>: 捕获到后代组件异常 (v2.5+ 新增)</li></ul><p>vue3 生命周期, 大体保持一致, 以下部分名称有所调整</p><ul><li><code>beforeDestory</code> -&gt; <code>beforeUnmount</code></li><li><code>destoryed</code> -&gt; <code>unmounted</code></li></ul><p>组件调用顺序：先父后子，渲染完成顺序：先子后父 <br> 组件销毁顺序：先父后子，销毁完成顺序：先子后父</p><h3 id="模板描述" tabindex="-1">模板描述 <a class="header-anchor" href="#模板描述" aria-label="Permalink to &quot;模板描述&quot;">​</a></h3><ul><li><code>v-if</code> &amp; <code>v-show</code>: <code>v-if</code> 控制元素是否渲染, <code>v-show</code> 通过 <code>display: none</code> 控制元素是否展示</li><li><code>v-if</code> &amp; <code>v-for</code> 优先级: vue2 中 <code>v-for</code> 优先级高, vue3 中 <code>v-if</code> 优先级高, <strong>应避免同时使用</strong></li></ul><h3 id="数据响应" tabindex="-1">数据响应 <a class="header-anchor" href="#数据响应" aria-label="Permalink to &quot;数据响应&quot;">​</a></h3><ul><li><code>data</code>: 通常为返回对象的函数, 此处声明的数据是响应式的 <ul><li>若直接使用对象 则该部分数据将在多个组件实例中共享</li><li>若未在此处声明但需要增加响应式数据, 需要使用 <code>Vue.set(target, propName, value)</code></li></ul></li><li><code>computed</code>: 返回根据响应式数据计算获取返回值的函数</li><li><code>watch</code>: 监听响应式数据的变动, 并触发回调函数</li></ul><h2 id="组件通信" tabindex="-1">组件通信 <a class="header-anchor" href="#组件通信" aria-label="Permalink to &quot;组件通信&quot;">​</a></h2><p>父子组件</p><ul><li>父 -&gt; 子：通过 <code>props</code> 传递信息</li><li>子 -&gt; 父：通过 <code>$emit</code> 传递信息</li></ul><p>后代组件</p><ul><li>祖先 -&gt; 后代：祖先通过 <code>provide</code> 提供数据，后代通过 <code>inject</code> 获取数据</li></ul><p>任意层级</p><ul><li>通过 <code>EventBus</code> 进行管理消息的发布和订阅</li><li>通过 <code>vuex</code>(vue2) / <code>pinia</code>(vue3) 管理全局的数据通信</li></ul><h2 id="内置组件" tabindex="-1">内置组件 <a class="header-anchor" href="#内置组件" aria-label="Permalink to &quot;内置组件&quot;">​</a></h2><ul><li><code>&lt;component :is=&quot;xx&quot; /&gt;</code>: 动态组件, 与 <code>&lt;keep-alive&gt;</code> 配合会触发 <code>activated</code> 和 <code>deactivated</code> 生命周期</li><li><code>&lt;keep-alive :include=&quot;&quot; :exclude=&quot;&quot; max=&quot;10&quot; /&gt;</code>: 包裹动态组件时，缓存不活动的实例</li><li><code>&lt;teleport :to=&quot;&quot; /&gt;</code>: 挂载传送, 将渲染内容挂载到指定元素下</li></ul><h2 id="功能扩展" tabindex="-1">功能扩展 <a class="header-anchor" href="#功能扩展" aria-label="Permalink to &quot;功能扩展&quot;">​</a></h2><h3 id="扩展插件" tabindex="-1">扩展插件 <a class="header-anchor" href="#扩展插件" aria-label="Permalink to &quot;扩展插件&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// vue2</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> opts </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">demo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 可选参数</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> plg2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">install</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">Vue</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">opts</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 插件逻辑</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#89DDFF;">};</span></span>\n<span class="line"><span style="color:#A6ACCD;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(plg2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> opts)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 作用于全局</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// vue3</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> plg3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">install</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">app</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">opts</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 插件逻辑</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#89DDFF;">};</span></span>\n<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(plg3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> opts)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 作用于app</span></span></code></pre></div><h3 id="扩展指令" tabindex="-1">扩展指令 <a class="header-anchor" href="#扩展指令" aria-label="Permalink to &quot;扩展指令&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// vue2</span></span>\n<span class="line"><span style="color:#A6ACCD;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">directive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">demo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">bind</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 只调用一次，指令第一次绑定到元素时调用</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">inserted</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 被绑定元素插入父节点时调用</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">update</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 所在组件的VNode更新时调用</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">componentUpdated</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 指令所在组件的VNode及其子VNode全部更新后调用</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">unbind</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 只调用一次，指令与元素解绑时调用</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// vue3</span></span>\n<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">directive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">demo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">created</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">beforeMount</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mounted</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">beforeUpdate</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">updated</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">beforeUnmount</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">unmounted</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/** 参数</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">  - `el` : 指令绑定的元素</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">  - `binding` &lt;Object&gt;</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">    - `name` : 指令名，即指令注册时的名称(不含`v-`)</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">    - `value` : 指令的绑定值，即给指令所赋的值(`=`后面的值)</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">    - `oldValue` : 指令绑定的前一个值，仅在`update`和`componentUpdated`钩子中可用</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">    - `expression` : 字符串形式的指令表达式，即给指令所赋的表达式(`=`后面的表达式，未计算成值)</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">    - `arg` : 传给指令的参数，可选(使用形式为`v-directive:attr`时，`attr`为其参数)</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">    - `modifiers` : 包含修饰符的对象(使用形式为`v-directive.modi1.modi2`时，修饰符对象为`{ modi1: true, modi2: true }`)</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">  - `vnode` : Vue 编译生成的虚拟节点</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">  - `oldVnode` : 上一个虚拟节点，仅在`update`和`componentUpdated`钩子中可用</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span></code></pre></div>',29),p=[e];function t(c,r,i,y,d,D){return a(),l("div",null,p)}const A=s(o,[["render",t]]);export{C as __pageData,A as default};
