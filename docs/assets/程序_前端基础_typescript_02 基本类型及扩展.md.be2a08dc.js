import{_ as s,v as l,b as n,R as a}from"./chunks/framework.ecc14119.js";const C=JSON.parse('{"title":"基本类型","description":"","frontmatter":{},"headers":[],"relativePath":"程序/前端基础/typescript/02 基本类型及扩展.md","filePath":"程序/前端基础/typescript/02 基本类型及扩展.md","lastUpdated":1687190476000}'),o={name:"程序/前端基础/typescript/02 基本类型及扩展.md"},e=a(`<h1 id="基本类型" tabindex="-1">基本类型 <a class="header-anchor" href="#基本类型" aria-label="Permalink to &quot;基本类型&quot;">​</a></h1><h2 id="类型列表" tabindex="-1">类型列表 <a class="header-anchor" href="#类型列表" aria-label="Permalink to &quot;类型列表&quot;">​</a></h2><table><thead><tr><th>数据类型</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>undefined</code></td><td>值为 <code>undefined</code></td><td><code>let TBD: undefined</code></td></tr><tr><td><code>null</code></td><td>值为 <code>null</code></td><td><code>let nothing: null = null</code></td></tr><tr><td><code>void</code></td><td>值为 <code>undefined</code> 或 <code>null</code></td><td><code>let empty: void; empty=null</code></td></tr><tr><td><code>boolean</code></td><td>值为 <code>true</code> 或 <code>false</code></td><td><code>let boolean: boolean = true</code></td></tr><tr><td><code>number</code></td><td>值为 数字</td><td><code>let number: number = 7</code></td></tr><tr><td><code>string</code></td><td>值为 字符串</td><td><code>let string: string = &#39;lazyneko&#39;</code></td></tr><tr><td><code>symbol</code></td><td>值为 <code>symbol</code></td><td><code>const symbol: symbol = Symbol();</code></td></tr><tr><td><code>enum</code></td><td>值为 枚举，需要先定义</td><td><code>enum DOA = { dead, alive }; let dead: DOA = DOA.dead</code></td></tr><tr><td><code>never</code></td><td>用于描述永不存在的值</td><td><code>const error = (): never =&gt; { throw new Error(&#39;7&#39;) }</code></td></tr><tr><td><code>any</code></td><td>值为任意类型</td><td><code>let any: any; any = 7; any = {seven: 7}</code></td></tr></tbody></table><p>说明：</p><ul><li>默认情况下 <code>null</code> 和 <code>undefined</code> 类型是所有类型的子类型，即可以把 <code>null</code> 或 <code>undefined</code> 赋值给任意变量</li><li>在指定 <code>--strictNullChecks</code> 标记时，<code>undefined</code>, <code>null</code> 只能赋值给 <code>void</code> 类型和它们自身类型</li><li>在 <code>--strictNullChecks</code> 模式下，若想给变量传递 <code>undefined</code> 或 <code>null</code> 值可以使用联合类型，如 <code>let str: string|null = null;</code>, 可选属性和可选参数会被自动加上 <code>| undefined</code></li></ul><h2 id="void、never、any" tabindex="-1"><code>void</code>、<code>never</code>、<code>any</code> <a class="header-anchor" href="#void、never、any" aria-label="Permalink to &quot;\`void\`、\`never\`、\`any\`&quot;">​</a></h2><ul><li><code>void</code> 用于描述一个空值，通常没有什么用</li><li><code>never</code> 用于描述一个不应存在的值，如 异常、死循环等，通常没什么用，应当不属于基本类型，置于上表方便整理</li><li><code>any</code> 类型可以用来描述任意类型，不属于基本类型，置于上表以方便整理</li></ul><h2 id="枚举" tabindex="-1">枚举 <a class="header-anchor" href="#枚举" aria-label="Permalink to &quot;枚举&quot;">​</a></h2><p>typescript 中添加了枚举类型用于限定变量取值范围：</p><ul><li>基本介绍 <ul><li>枚举类型定义了一组值，用于限定变量的取值范围</li><li>typescript 支持值为数字和字符串类型的枚举</li></ul></li><li>枚举类型：依据枚举成员的数据类型分为以下几种枚举类型 <ul><li>数字枚举</li><li>字符串枚举</li><li>异构枚举</li></ul></li><li>枚举成员：每个枚举成员都代表一个值，可以是常量或计算出来的值 <ul><li>数字枚举成员可以使用默认规则生成值、设置指定数值或可计算的结果合法的表达式</li><li>字符串枚举成员必须设置初始化值且不可使用计算值</li></ul></li><li>联合枚举：当所有枚举成员都拥有字面量枚举值时，枚举成员可以作为类型使用</li><li>运行时枚举：<strong>声明枚举类型将创建一个同名的对象</strong><ul><li>可直接作为对象使用</li><li>数字枚举将创建键值对互相映射的对象</li><li>字符串枚举将创建同键值对的对象</li></ul></li><li><code>const</code>枚举：<strong>使用 <code>const</code> 枚举不会创建同名的对象</strong><ul><li>编译后没有额外的开销，不可作为对象使用</li><li>成员的值只能是常量或常量表达式</li><li>在使用枚举成员的地方会被当做值处理</li></ul></li><li>使用 <code>declare</code> 声明外部枚举，用来描述一个已存在的枚举类型 <ul><li>对于非常数的外部枚举而言，没有初始化方法时被当做需要经过计算的(<a href="https://stackoverflow.com/questions/28818849/how-do-the-different-enum-variants-work-in-typescript" target="_blank" rel="noreferrer">可以看这里的解释</a>)</li></ul></li></ul><p>各种枚举类型的特点：</p><ul><li>数字枚举 <ul><li>未指定成员的值为前一个成员的值加 1</li><li>第一个成员的值默认为 0</li><li>成员可以使用计算结果非 <code>NaN</code> 和 <code>Infinity</code> 的表达式</li><li>如果成员值是一个无法及时计算(如函数的返回值，变量之间的运算)，则无法使用自增</li><li><strong>数字枚举成员具有反向映射，可以通过枚举值获取枚举名字</strong></li></ul></li><li>字符串枚举 <ul><li>没有自增行为</li><li>需要给每个枚举成员指定值</li><li><strong>含字符串值成员的枚举中不允许使用计算值</strong></li></ul></li><li>异构枚举 <ul><li>枚举成员混合了数字类型和字符串类型</li><li>不建议使用</li></ul></li></ul><p>示例</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Version</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  init </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  first</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//自增为 1.1</span></span>
<span class="line"><span style="color:#A6ACCD;">  lts </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2.5</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  next</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//自增为 3.5</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">State</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  Stable </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stable</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  Abandoned </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">abandoned</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Util</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">state</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">State</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Stable</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//作为类型使用</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">showKV</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">obj</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">entries</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">val</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">val[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">val[</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// showKV(State)   //&quot;const&quot; 枚举仅可在属性、索引访问表达式、导入声明的右侧、导出分配或类型查询中使用。</span></span>
<span class="line"><span style="color:#82AAFF;">showKV</span><span style="color:#A6ACCD;">(Version)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 数字枚举具有反向映射，会生成键值对交互的对象</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 输出如下 &gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * init: 0.1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 0.1: init</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * first: 1.1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 1.1: first</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * lts: 2.5</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 2.5: lts</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * next: 3.5</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 3.5: next</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> init </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Version</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">init</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> stable </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> State</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Stable</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(Version[init])</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//init</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(stable)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//stable</span></span></code></pre></div>`,14),t=[e];function p(c,r,i,d,y,D){return l(),n("div",null,t)}const A=s(o,[["render",p]]);export{C as __pageData,A as default};
