import{_ as s,v as a,b as n,R as l}from"./chunks/framework.cc13f38d.js";const d=JSON.parse('{"title":"Single Sign On(SSO)","description":"","frontmatter":{},"headers":[],"relativePath":"程序/经验汇总/方案工具/单点登录.md","filePath":"程序/经验汇总/方案工具/单点登录.md","lastUpdated":1688291041000}'),o={name:"程序/经验汇总/方案工具/单点登录.md"},e=l(`<h1 id="single-sign-on-sso" tabindex="-1">Single Sign On(SSO) <a class="header-anchor" href="#single-sign-on-sso" aria-label="Permalink to &quot;Single Sign On(SSO)&quot;">​</a></h1><p>单点登录：在多个应用系统中，只需要登录一次，就可以访问其他相互信任的应用系统。</p><h2 id="同域下的单点登录" tabindex="-1">同域下的单点登录 <a class="header-anchor" href="#同域下的单点登录" aria-label="Permalink to &quot;同域下的单点登录&quot;">​</a></h2><p>通过三级域名(app.xxx.com)区分应用，可以设置二级域名下的 cookie，利用三级域名可以访问二级域名的方式，实现 cookie 在不同应用之间的传递。</p><h2 id="跨域下的单点登录" tabindex="-1">跨域下的单点登录 <a class="header-anchor" href="#跨域下的单点登录" aria-label="Permalink to &quot;跨域下的单点登录&quot;">​</a></h2><p>使用 CAS 流程实现，该流程是单点登录的标准流程</p><ol><li>未登录用户访问 app，跳转到 CAS Server (SSO 登录系统)</li><li>SSO 登录认证后，将登录状态写入 SSO 的 session，浏览器端记下 SSO 域的 cookie</li><li>SSO 登录完成后生成一个 Service Ticket，跳转至 app 并传递该数据</li><li>app 获取 Service Ticket 后向后端请求验证是否有效</li><li>app 验证通过后记下 session 并设置 app 域的 cookie</li></ol><p>NOTE</p><ul><li>Service Ticket 通常保存在 redis 中</li></ul><h1 id="json-web-token-jwt" tabindex="-1">JSON Web Token(JWT) <a class="header-anchor" href="#json-web-token-jwt" aria-label="Permalink to &quot;JSON Web Token(JWT)&quot;">​</a></h1><p>JWT 是为了在网络应用环境间传递声明而执行的一种基于 JSON 的开放标准，适用于分布式站点的 SSO 场景</p><h2 id="传统的-session-认证" tabindex="-1">传统的 session 认证 <a class="header-anchor" href="#传统的-session-认证" aria-label="Permalink to &quot;传统的 session 认证&quot;">​</a></h2><p>客户端存储 cookie 用于标识用户，服务端根据 cookie 进行 session 认证；</p><p>session 认证的问题</p><ul><li>session 通常存储于内存中，用户的增多会提高服务端的开销</li><li>由于认证存储于内存中，在分布式的应用上，限制了负载均衡器的能力</li><li>cookie 若被截获容易受到 CSRF 攻击</li></ul><h2 id="基于-token-的鉴权机制" tabindex="-1">基于 token 的鉴权机制 <a class="header-anchor" href="#基于-token-的鉴权机制" aria-label="Permalink to &quot;基于 token 的鉴权机制&quot;">​</a></h2><p>工作流程</p><ol><li>用户登录</li><li>服务器验证登录信息</li><li>服务器通过验证发送 token</li><li>客户端存储 token 并在每次请求时附送上 token</li><li>服务端验证 token 后进行正常处理流程</li></ol><p>该 token 需要保存在请求头中，服务端需要支持 CORS 策略</p><h2 id="jwt-组成部分" tabindex="-1">JWT 组成部分 <a class="header-anchor" href="#jwt-组成部分" aria-label="Permalink to &quot;JWT 组成部分&quot;">​</a></h2><p>JWT 是三段用 <code>.</code> 连接的字符串，包括头部、载荷、签名</p><h3 id="头部" tabindex="-1">头部 <a class="header-anchor" href="#头部" aria-label="Permalink to &quot;头部&quot;">​</a></h3><p>包括声明类型和声明加密算法，如</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">typ:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">JWT</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">alg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">HS256</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>然后对头部进行 base64 转换生成第一部分字符串</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</span></span></code></pre></div><h3 id="载荷" tabindex="-1">载荷 <a class="header-anchor" href="#载荷" aria-label="Permalink to &quot;载荷&quot;">​</a></h3><p>用于存放有效信息，包括</p><ul><li>标准中注册的声明 <ul><li>iss: jwt 签发者</li><li>sub: jwt 所面向的用户</li><li>aud: 接收 jwt 的一方</li><li>exp: jwt 的过期时间，这个过期时间必须要大于签发时间</li><li>nbf: 定义在什么时间之前，该 jwt 都是不可用的.</li><li>iat: jwt 的签发时间</li><li>jti: jwt 的唯一身份标识，主要用来作为一次性 token,从而回避重放攻击。</li></ul></li><li>公共的声明：可添加任何非敏感信息，该部分可被解密</li><li>私有的声明：提供者和消费者共同定义的声明，该部分可被解密</li></ul><p>然后对头部进行 base64 转换生成第二部分字符串</p><h3 id="签名" tabindex="-1">签名 <a class="header-anchor" href="#签名" aria-label="Permalink to &quot;签名&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 生成方式如下</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> encodedString </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Base64</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">encode</span><span style="color:#A6ACCD;">(header) </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> Base64</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">encode</span><span style="color:#A6ACCD;">(payload)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// NOTE: 后端生成，secret 为服务端数据，不能暴露给客户端</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> signature </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">HMACSHA256</span><span style="color:#A6ACCD;">(encodedString</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> secret)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> url </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> token </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// JWT</span></span>
<span class="line"><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(url</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">headers</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">Authorization</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Bearer</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> token</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>由于 JWT 签名部分在服务端生成，可以避免数据被篡改</p><p>头部和载荷部分使用 Base64 转换，可以被解析</p><p>JWT 相较于 session 少了缓存机制，在使用中无法废止，通常需要设置一个有效期</p>`,38),p=[e];function t(i,c,r,D,y,F){return a(),n("div",null,p)}const h=s(o,[["render",t]]);export{d as __pageData,h as default};
