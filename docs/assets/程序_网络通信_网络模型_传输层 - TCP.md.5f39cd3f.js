import{_ as s,o as l,c as a,V as n}from"./chunks/framework.bbae8ef5.js";const o="/note/assets/拥塞控制.15718bbf.png",h=JSON.parse('{"title":"TCP","description":"","frontmatter":{},"headers":[],"relativePath":"程序/网络通信/网络模型/传输层 - TCP.md","filePath":"程序/网络通信/网络模型/传输层 - TCP.md","lastUpdated":1687109729000}'),t={name:"程序/网络通信/网络模型/传输层 - TCP.md"},p=n(`<h1 id="tcp" tabindex="-1">TCP <a class="header-anchor" href="#tcp" aria-label="Permalink to &quot;TCP&quot;">​</a></h1><p>TCP(传输控制协议)是一种面向连接的、可靠的、据域字节流的传输层通信协议</p><h2 id="头部信息" tabindex="-1">头部信息 <a class="header-anchor" href="#头部信息" aria-label="Permalink to &quot;头部信息&quot;">​</a></h2><ul><li>source port: 16 位</li><li>destination port: 16 位</li><li>sequence number: 32 位，发生数据包中第一个字节的序列号</li><li>acknowledgment number: 32 位，确认序列号</li><li>date offset: 4 位，数据偏移，值=TCP 首部长度/4</li><li>标志位: 6 位 <ul><li>ACK: 表示 acknowledgment number 字段有意义</li><li>PSH: 表示 Push 功能</li><li>RST: 表示复位 TCP 连接</li><li>SYN: 表示 SYN 报文</li><li>FIN: 表示没有数据需要发送</li></ul></li><li>window size: 16 位，表示接收缓存区的空闲空间</li><li>checksum: 16 位，校验和</li><li>urgent pointers: 16 位，紧急指针</li></ul><h2 id="状态控制" tabindex="-1">状态控制 <a class="header-anchor" href="#状态控制" aria-label="Permalink to &quot;状态控制&quot;">​</a></h2><p>TCP 是面向连接的通信协议，在建立连接和终止连接时采用了三次握手和四次挥手的机制</p><h3 id="三次握手" tabindex="-1">三次握手 <a class="header-anchor" href="#三次握手" aria-label="Permalink to &quot;三次握手&quot;">​</a></h3><p>三次握手是请求方向响应方建立 TCP 连接的过程</p><div class="language-mermaid"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">sequenceDiagram</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">participant</span><span style="color:#A6ACCD;"> A </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">请求方</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">participant</span><span style="color:#A6ACCD;"> B </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">响应方</span></span>
<span class="line"><span style="color:#A6ACCD;">  A </span><span style="color:#89DDFF;font-style:italic;">--&gt;&gt;</span><span style="color:#A6ACCD;"> B</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">SYN，seq=x</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">Note</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">left of</span><span style="color:#A6ACCD;"> A</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">进入 SYN_SEND 状态</span></span>
<span class="line"><span style="color:#A6ACCD;">  B </span><span style="color:#89DDFF;font-style:italic;">--&gt;&gt;</span><span style="color:#A6ACCD;"> A</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">SYN+ACK，seq=y，ack=x+1</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">Note</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">right of</span><span style="color:#A6ACCD;"> B</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">进入 SYN_RCVD 状态</span></span>
<span class="line"><span style="color:#A6ACCD;">  A </span><span style="color:#89DDFF;font-style:italic;">--&gt;&gt;</span><span style="color:#A6ACCD;"> B</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ACK，seq=x+1，ack=y+1</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">Note</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">left of</span><span style="color:#A6ACCD;"> A</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">进入 ESTABLISHED 状态</span></span></code></pre></div><p>过程描述</p><ol><li>请求方发送 SYN(seq=x) 报文给响应方，进入 SYN_SEND 状态</li><li>响应方接收 SYN 报文，返回 SYN(seq=y)+ACK(ack=x+1) 报文，进入 SYN_RECV 状态</li><li>请求方接收 SYN+ACK 报文，返回 ACK(ack=y+1) 报文，进入 ESTABLISHED 状态</li></ol><h3 id="四次挥手" tabindex="-1">四次挥手 <a class="header-anchor" href="#四次挥手" aria-label="Permalink to &quot;四次挥手&quot;">​</a></h3><p>四次挥手是请求方向响应方断开 TCP 连接的过程</p><div class="language-mermaid"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">sequenceDiagram</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">participant</span><span style="color:#A6ACCD;"> A </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">请求方</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">participant</span><span style="color:#A6ACCD;"> B </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">响应方</span></span>
<span class="line"><span style="color:#A6ACCD;">  A </span><span style="color:#89DDFF;font-style:italic;">--&gt;&gt;</span><span style="color:#A6ACCD;"> B</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">FIN</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">Note</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">left of</span><span style="color:#A6ACCD;"> A</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">进入 FIN_WAIT_1 状态</span></span>
<span class="line"><span style="color:#A6ACCD;">  B </span><span style="color:#89DDFF;font-style:italic;">--&gt;&gt;</span><span style="color:#A6ACCD;"> A</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ACK</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">Note</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">right of</span><span style="color:#A6ACCD;"> B</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">进入 CLOSE_WAIT 状态</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">Note</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">left of</span><span style="color:#A6ACCD;"> A</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">进入 FIN_WAIT_2 状态</span></span>
<span class="line"><span style="color:#A6ACCD;">  B </span><span style="color:#89DDFF;font-style:italic;">--&gt;&gt;</span><span style="color:#A6ACCD;"> A</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">FIN</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">Note</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">right of</span><span style="color:#A6ACCD;"> B</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">进入 LAST_ACT 状态</span></span>
<span class="line"><span style="color:#A6ACCD;">  A </span><span style="color:#89DDFF;font-style:italic;">--&gt;&gt;</span><span style="color:#A6ACCD;"> B</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ACK</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">Note</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">left of</span><span style="color:#A6ACCD;"> A</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">进入 TIME_WAIT 状态</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">Note</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">right of</span><span style="color:#A6ACCD;"> B</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">进入 CLOSED 状态</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">Note</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">left of</span><span style="color:#A6ACCD;"> A</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">经过 2MSL 时间后进入 CLOSED 状态</span></span></code></pre></div><p>过程描述</p><ol><li>请求方数据发送完毕，发送 FIN 报文请求断开连接 (请求方可以接收数据)</li><li>响应方接收 FIN 报文，发送 ACK 报文，进入 CLOSE_WAIT 状态 (响应方可以发送数据)</li><li>响应方数据发送完毕，发送 FIN 报文表示数据发送完毕，进入 LAST_ACT 状态</li><li>请求方接收 FIN 报文，发送 ACK 报文，进入 TIME_WAIT 状态 <ul><li>响应方接收 ACK 报文后进入 CLOSED 状态</li><li>请求方经过 2MSL(最大生存期) 后若未接收到响应端请求，则进入 CLOSED 状态</li></ul></li></ol><p>说明：第二次和第三次挥手可以合并发送</p><h2 id="传输控制" tabindex="-1">传输控制 <a class="header-anchor" href="#传输控制" aria-label="Permalink to &quot;传输控制&quot;">​</a></h2><h3 id="超时重传" tabindex="-1">超时重传 <a class="header-anchor" href="#超时重传" aria-label="Permalink to &quot;超时重传&quot;">​</a></h3><p>超时重传(ARQ)机制用于确保数据正确送达，在发送报文段时会开启定时器并保留副本等待响应端回应</p><ul><li>若在定时器时间内接收响应则取消定时器并删除副本</li><li>若发生超时，则重新发送报文直到成功</li></ul><p>重传超时时间(RTO)一般大于一个 RTT 的平均时间，由于传输距离与传输负载在传输时的差异，RTO 的设计通常采用自适应算法以适应不同的网络</p><p>建议 RTO = RTT~s~ + 4 × RTT~d~</p><ul><li>RTT~s~: 加权平均往返时间</li><li>RTT~d~: 偏差的加权平均值</li></ul><h3 id="滑动窗口" tabindex="-1">滑动窗口 <a class="header-anchor" href="#滑动窗口" aria-label="Permalink to &quot;滑动窗口&quot;">​</a></h3><p>滑动窗口是一种流量控制技术，用于解决网络拥塞状态下的传输问题<br></p><h4 id="工作流程" tabindex="-1">工作流程 <a class="header-anchor" href="#工作流程" aria-label="Permalink to &quot;工作流程&quot;">​</a></h4><p>窗口机制：在任意时刻，发送方与接收方各维持了一个连续的允许发送或接收帧的序号，称为发送窗口与接收窗口，发送窗口与接收窗口的需靠上下界和大小都可不同。</p><p>发送窗口按序号发送帧，发送窗口内若全部帧处于待确认状态则停止发送；<br> 接收窗口按序号接收帧，接收后发送确认帧并向后滑动窗口<br> 发送窗口接收到确认信息，从重发表删除对应帧并向后滑动窗口 <br></p><h4 id="相关协议" tabindex="-1">相关协议 <a class="header-anchor" href="#相关协议" aria-label="Permalink to &quot;相关协议&quot;">​</a></h4><p>根据滑动窗口尺寸分为以下三种协议</p><ul><li>停等协议：当发送窗口与接收擦黄口大小固定为 1 时，滑动窗口协议退化为停等协议 <ul><li>发送窗口=1；接收窗口=1</li><li>需要不停的等待应答帧，信道利用率低</li></ul></li><li>后退 n 协议：发送方会连续发送若干数据帧，并对每个数据帧设置超时定时器，超时后将重发超时帧及后续帧 <ul><li>发送窗口&gt;1；接收窗口=1</li><li>重传时需要重传错误帧及后续帧，在误码率较大场景下，传输效率依旧不高</li></ul></li><li>选择重传协议：接收方对于错误帧后续的正确帧进行缓存并要求重传错误帧 <ul><li>发送窗口&gt;1；接收窗口&gt;1</li><li>减少了重发浪费，具有较高的传输效率，但要求接收方具有足够的缓冲空间</li></ul></li></ul><h4 id="窗口大小" tabindex="-1">窗口大小 <a class="header-anchor" href="#窗口大小" aria-label="Permalink to &quot;窗口大小&quot;">​</a></h4><p>TCP 连接阶段，双方协商窗口尺寸同时接收方预留数据缓存区<br></p><h3 id="拥塞控制" tabindex="-1">拥塞控制 <a class="header-anchor" href="#拥塞控制" aria-label="Permalink to &quot;拥塞控制&quot;">​</a></h3><p>网络拥塞是网络中某一资源的需求超过了该资源所能提供的可用部分造成网络性能变差的情况 <br> TCP 使用多种拥塞控制策略避免雪崩式拥塞</p><ul><li>为每条连接维护一个 拥塞窗口 限制端到端传输的未确认分组总理</li><li>在连接初始化或超时后使用 慢启动 机制增加 拥塞窗口 的大小</li></ul><h4 id="核心概念" tabindex="-1">核心概念 <a class="header-anchor" href="#核心概念" aria-label="Permalink to &quot;核心概念&quot;">​</a></h4><p>拥塞窗口(cwnd)，由发送方维护，用于控制每次发送数据包的大小<br> 最大分段大小(MSS，IPv4 为 536 字节，IPv6 为 1220 字节)，这里表示拥塞窗口大小的单位<br> 慢启动门限(ssthresh)，拥塞窗口的最大值 <br></p><h4 id="算法流程" tabindex="-1">算法流程 <a class="header-anchor" href="#算法流程" aria-label="Permalink to &quot;算法流程&quot;">​</a></h4><ol><li>慢启动阶段：设置 cwnd 初值为 1/2/4/10 个 MSS，每次接收到确认包时翻倍增加，直至达到 ssthresh 或丢包等。</li><li>拥塞避免阶段：采用线增积减(AIMD)的反馈机制控制 cwnd 大小。cwnd 达到 ssthresh 时，若网络良好，每经过一个 RTT，cwnd 与 ssthresh += 1MSS；若网络拥塞(超时)，则 ssthresh 减半，cwnd 置 1MSS，进入慢启动阶段。</li><li>快速重传机制：TCP 在发送报文段时会开启超时计时器，当发送方收到 4 次相同的分段确认(假设重复阈值 3 次)，则认为可能出现丢包状态，发送方忽略超时计时器并立即重发，进入快速恢复阶段</li><li>快速恢复阶段：发送方将 cwnd 与 ssthresh 减半，随后进入拥塞避免阶段</li></ol><p><img src="`+o+'" alt="拥塞控制流程"></p>',42),e=[p];function c(i,r,C,A,y,D){return l(),a("div",null,e)}const d=s(t,[["render",c]]);export{h as __pageData,d as default};
