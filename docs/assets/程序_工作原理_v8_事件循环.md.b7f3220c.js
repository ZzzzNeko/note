import{_ as s,o as l,c as a,V as n}from"./chunks/framework.3b22bc79.js";const C=JSON.parse('{"title":"事件循环","description":"","frontmatter":{},"headers":[],"relativePath":"程序/工作原理/v8/事件循环.md","filePath":"程序/工作原理/v8/事件循环.md","lastUpdated":null}'),o={name:"程序/工作原理/v8/事件循环.md"},p=n(`<h1 id="事件循环" tabindex="-1">事件循环 <a class="header-anchor" href="#事件循环" aria-label="Permalink to &quot;事件循环&quot;">​</a></h1><p>JS 是一个非阻塞单线程的语言，单线程确保流程的执行顺序，非阻塞指异步操作会被挂起而优先执行同步操作；<br> JS 内部会一直接受消息队列，当事件触发时, 会添加对应的消息至消息队列中, 消息会按照队列中的顺序依此执行。<br></p><ul><li>同步任务在主线程上执行，形成 执行栈</li><li>等待任务的回调结果进入 任务队列</li><li>当主线程中同步任务执行完后才读取 任务队列，任务队列 中的异步任务进入主执行栈</li><li>异步任务执行完毕后进行下一个循环</li></ul><p>JS 的并发模型基于事件循环</p><h2 id="运行时概念" tabindex="-1">运行时概念 <a class="header-anchor" href="#运行时概念" aria-label="Permalink to &quot;运行时概念&quot;">​</a></h2><ul><li>堆(Heap): 存放对象等大块非结构化的内存区域</li><li>栈(Stack): 函数调用形成一个栈帧, 函数内部调用的函数会依此入栈</li><li>队列(Queue): 事件循环通过消息队列处理, 每个消息对应与之关联的函数</li></ul><h2 id="添加消息-任务" tabindex="-1">添加消息(任务) <a class="header-anchor" href="#添加消息-任务" aria-label="Permalink to &quot;添加消息(任务)&quot;">​</a></h2><ul><li>触发事件时，会为对应的监听器添加消息至消息队列</li></ul><p>任务队列中的异步任务分为两种</p><ul><li>微任务 <ul><li>Promise</li><li>MutationObserver</li><li>process.nextTrick</li></ul></li><li>宏任务 <ul><li>setImmediate(node support)</li><li>setInterval</li><li>setTimeout</li><li>MessageChannel</li><li>postMessage</li><li>I/O</li><li>UI render</li></ul></li></ul><p>执行顺序: 当前执行栈执行完毕时优先处理微任务队列中的事件，再取宏任务队列中的事件</p><p>事件冒泡：微任务的优先级高于事件冒泡，宏任务的优先级低于事件冒泡</p><h2 id="示例代码" tabindex="-1">示例代码 <a class="header-anchor" href="#示例代码" aria-label="Permalink to &quot;示例代码&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">timeout 1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> prev </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> prev </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2000</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">timeout 2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">promise</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &gt; 1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &gt; 2</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &gt; 3</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &gt; promise</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &gt; timeout 1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &gt; timeout 2</span></span></code></pre></div><p>说明</p><ul><li>setTimeout 接受的参数表示待加入队列的消息</li><li>延迟时间指队列中消息都处理完毕后等待的最小时间</li></ul><p>分析</p><ol><li>第一轮宏任务中执行同步代码：1 -&gt; 2 -&gt; 3</li><li>第一轮宏任务结束后执行微任务：promise</li><li>while 循环时间 2s 大于第一次的 setTimeout，while 执行之后第一次的 setTimeout 已将任务推入事件队列</li><li>第二次的 setTimeout 在 while 之后，故事件队列中宏任务的顺序为 [timeout 1, timeout 2]</li></ol><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop" target="_blank" rel="noreferrer">并发模型与事件循环</a></li></ul>`,20),e=[p];function t(c,r,i,y,D,F){return l(),a("div",null,e)}const u=s(o,[["render",t]]);export{C as __pageData,u as default};
