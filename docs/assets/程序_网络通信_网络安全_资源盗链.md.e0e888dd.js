import{_ as e,v as l,b as r,R as a}from"./chunks/framework.cc13f38d.js";const _=JSON.parse('{"title":"资源盗链","description":"","frontmatter":{},"headers":[],"relativePath":"程序/网络通信/网络安全/资源盗链.md","filePath":"程序/网络通信/网络安全/资源盗链.md","lastUpdated":1687109729000}'),i={name:"程序/网络通信/网络安全/资源盗链.md"},t=a('<h1 id="资源盗链" tabindex="-1">资源盗链 <a class="header-anchor" href="#资源盗链" aria-label="Permalink to &quot;资源盗链&quot;">​</a></h1><p>资源盗链指本站资源地址被第三方未经授权直接使用</p><h2 id="预防方式" tabindex="-1">预防方式 <a class="header-anchor" href="#预防方式" aria-label="Permalink to &quot;预防方式&quot;">​</a></h2><p>预防方式</p><ul><li>对链接处理 <ul><li>资源地址自动化更新</li><li>对 <code>referer</code> 头进行同源或白名单判断</li><li>用户认证，判断当前资源的访问者</li></ul></li><li>对资源处理 <ul><li>添加水印</li></ul></li></ul><h2 id="referer-字段" tabindex="-1">referer 字段 <a class="header-anchor" href="#referer-字段" aria-label="Permalink to &quot;referer 字段&quot;">​</a></h2><p>Referer 是 HTTP 请求头的一个字段在访问资源时，默认会带上请求来源的地址(可手动关闭)</p><p>常见用途</p><ul><li>统计: 可用来统计请求资源的数量，(注意：AJAX 请求不适用，因为其值会忽略资源路径)</li><li>防盗链: 通过配置白名单，判断请求来源是否为合法</li></ul><p>注意</p><ul><li>Referer 字段通常由浏览器自动携带，可以手动关闭，直接通过 地址栏访问的 接口 无 Referer 字段 (因为为空)</li><li>Referer 本质为请求 Header 字段，可以进行伪造</li><li>以下情况 Referer 不会被发送 <ul><li>来源页面协议为表示本地文件的 file 或 data URI</li><li>当前请求页面采用的是非安全协议，而来源页面采用的是安全协议</li></ul></li></ul><p>生产处理</p><ul><li>生产中一般不在代码中处理</li><li>运营商通常会提供对应的服务(一般在 访问控制 中)，进行快速配置</li></ul>',13),o=[t];function s(d,n,u,p,f,c){return l(),r("div",null,o)}const m=e(i,[["render",s]]);export{_ as __pageData,m as default};
