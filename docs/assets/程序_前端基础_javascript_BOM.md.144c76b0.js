import{_ as o,v as e,b as i,R as c}from"./chunks/framework.cc13f38d.js";const f=JSON.parse('{"title":"BOM(浏览器对象模型)","description":"","frontmatter":{},"headers":[],"relativePath":"程序/前端基础/javascript/BOM.md","filePath":"程序/前端基础/javascript/BOM.md","lastUpdated":1690472739000}'),l={name:"程序/前端基础/javascript/BOM.md"},d=c('<h1 id="bom-浏览器对象模型" tabindex="-1">BOM(浏览器对象模型) <a class="header-anchor" href="#bom-浏览器对象模型" aria-label="Permalink to &quot;BOM(浏览器对象模型)&quot;">​</a></h1><h2 id="window" tabindex="-1">Window <a class="header-anchor" href="#window" aria-label="Permalink to &quot;Window&quot;">​</a></h2><p>在浏览器端, <code>window</code> 对象为全局对象, 所有在全局声明的变量、函数 都可以通过 <code>window</code> 查找, <br> 从语义上看, <code>window</code> 指当前浏览器窗口, 故列举与浏览器相关的操作</p><h3 id="浏览器尺寸" tabindex="-1">浏览器尺寸 <a class="header-anchor" href="#浏览器尺寸" aria-label="Permalink to &quot;浏览器尺寸&quot;">​</a></h3><ul><li><code>window.innerHeight</code> : 浏览器窗口的内部高度</li><li><code>window.innerWidth</code>： 浏览器窗口的内部宽度</li><li><code>window.pageXOffset</code>:文档滚动的水平距离</li><li><code>window.pageYOffset</code>：文档滚动的垂直距离</li><li><code>window.screenLeft</code>：浏览器 X 轴相对于屏幕左上角坐标（有的浏览器也可用 screenX）</li><li><code>window.screenTop</code>：浏览器 Y 轴相对于屏幕左上角坐标（有的浏览器也可用 screenY）</li></ul><h3 id="浏览器窗口" tabindex="-1">浏览器窗口 <a class="header-anchor" href="#浏览器窗口" aria-label="Permalink to &quot;浏览器窗口&quot;">​</a></h3><ul><li><code>window.open()</code>: 打开新窗口, 如 <code>window.open(&quot;xxx.html&quot;,&quot;windowname&quot;,&quot;height=123,width=321,top=222,left=333&quot;)</code></li><li><code>window.close()</code>: 关闭当前窗口（火狐默认无法关，IE 会弹对话框，chrome 直接关）</li><li><code>window.print()</code>: 弹出打印</li><li><code>window.alert()</code>: 弹出警告</li><li><code>window.prompt()</code>: 对话框</li><li><code>window.confirm()</code>: 确认框</li><li><code>window.focus()</code>: 当前窗口给予焦点</li><li><code>window.blur()</code>: 当前窗口失去焦点</li><li><code>window.scrollBy(x, y)</code>: 调整窗口滚动(相对) <ul><li><code>window.scrollBy({ top: x, left: y, behavior: &#39;smooth&#39; | &#39;instant&#39; | &#39;auto&#39; })</code>: <code>behavior</code> 默认 <code>auto</code></li></ul></li><li><code>window.scrollTo(x, y)</code>: 调整窗口滚动(绝对) <ul><li><code>window.scrollTo({ top: x, left: y, behavior: &#39;smooth&#39; | &#39;instant&#39; | &#39;auto&#39; })</code>: <code>behavior</code> 默认 <code>auto</code></li></ul></li><li><code>window.resizeBy(deltaW, deltaH)</code>: 调整窗口大小(相对) (需要 <code>open()</code> 创建的单标签页)</li><li><code>window.resizeTo(w, h)</code>: 调整窗口大小(绝对) (需要 <code>open()</code> 创建的单标签页)</li><li><code>window.moveBy(deltaX, deltaY)</code>: 调整窗口位置(相对) (需要 <code>open()</code> 创建的单标签页)</li><li><code>window.moveTo(x, y)</code>: 调整窗口位置(绝对) (需要 <code>open()</code> 创建的单标签页)</li></ul><h3 id="常用子对象" tabindex="-1">常用子对象 <a class="header-anchor" href="#常用子对象" aria-label="Permalink to &quot;常用子对象&quot;">​</a></h3><ul><li><code>window.document</code>：指向 <code>document</code></li><li><code>window.location</code>: 当前 URL, 也可通过 <code>location.href = &#39;xx&#39;</code> 重定向</li><li><code>window.history</code>: 指向 <code>history</code></li><li><code>window.navigator</code>: 浏览器信息</li><li><code>window.screen</code>: 显示设备信息</li></ul><h2 id="location" tabindex="-1">Location <a class="header-anchor" href="#location" aria-label="Permalink to &quot;Location&quot;">​</a></h2><p><code>window.location</code> 与资源地址相关</p><ul><li><code>location.protocol</code>: 协议(如 <code>http:</code>、<code>https:</code>)</li><li><code>location.port</code>: 端口(一般为空)(http 默认 80，https 默认 443)</li><li><code>location.origin</code>: 来源 (<code>protocol</code> + <code>host</code>)</li><li><code>location.hostname</code>: 域名</li><li><code>location.host</code>: 域名 (<code>hostname</code> + <code>port</code>)(浏览器端一般与 <code>hostname</code> 表现一致)</li><li><code>location.pathname</code>: 资源路径(域名之后 <code>/</code> 到 <code>?</code> 之前(如果有)的部分)</li><li><code>lolcation.search</code>: 查询内容(<code>?</code> 及之后的部分)</li><li><code>lolcation.hash</code>: 哈希值(<code>#</code> 及之后的部分)</li><li><code>lolcation.href</code>: 完整的 URL</li><li><code>lolcation.reload(bool)</code>: 重新加载资源，可选参数为 <code>true</code> 时强刷新，默认 <code>false</code></li><li><code>location.replace(url)</code>: 替换当前页面资源，页面被替换后不会保存在 <code>History</code> 中</li><li><code>location.assign(url)</code>: 加载新的页面资源，相当于 <code>location.href = url</code></li></ul><p>赋值操作</p><ul><li><code>location = url</code>: 相当于 <code>location.assign(url)</code></li><li><code>location.href = url</code>: 相当于 <code>location = url</code></li><li><code>location.search = query</code>: 相当于修改了 url 的 query 并重新请求</li></ul><h2 id="history" tabindex="-1">History <a class="header-anchor" href="#history" aria-label="Permalink to &quot;History&quot;">​</a></h2><p><code>window.history</code> 与浏览器跳转历史记录相关</p><ul><li><code>history.state</code>: 只读属性, 历史堆栈顶部的 <code>state</code> 值</li><li><code>history.back()</code>: 后退, 等价于 <code>history.go(-1)</code></li><li><code>history.forward()</code>: 前进, 等价于 <code>history.go(1)</code></li><li><code>history.go(n)</code>: 相对当前位置跳转到指定历史记录, <code>.go()</code> 或 <code>.go(0)</code> 表示重载</li><li><code>history.pushState(state, title[, url])</code>: 添加 <code>state</code> 于历史堆栈, 并修改 <code>url</code>(可选)</li><li><code>history.replaceState(state, title[, url])</code>: 替换 <code>state</code> 于历史堆栈, 并修改 <code>url</code>(可选)</li></ul><p><code>popstate</code> 事件</p><ul><li>当激活文档中不同的历史条目时触发该事件</li><li>如 用户手动导航, 调用 <code>history.go()</code>、<code>history.back()</code>、<code>history.forward()</code> 方法、修改 <code>#hash</code></li><li><strong><code>history.pushState()</code> 和 <code>history.replaceState()</code></strong> 不会触发该事件</li></ul><p><code>hashchange</code> 事件</p><ul><li><code>url</code> 中 <code>#hash</code> 部分修改时触发</li></ul><h2 id="navigator" tabindex="-1">Navigator <a class="header-anchor" href="#navigator" aria-label="Permalink to &quot;Navigator&quot;">​</a></h2><p><code>window.navigator</code> 表示用户代理的状态和标识</p><ul><li>浏览器相关 <ul><li>appCodeName: 浏览器的内部“开发代号”名称</li><li>appName: 浏览器官方名称</li><li>appVersione: 浏览器版本</li><li>platforme: 返回运行浏览器的操作系统平台。</li><li>userAgent: 用户代理信息</li></ul></li><li>设备相关 <ul><li>hardwareConcurrency: 处理器核心</li><li>maxTouchPoints：支持的触点数目</li><li>oscpu: 操作系统</li></ul></li><li>站点相关 <ul><li>cookieEnabled: 是否允许 cookie</li><li>language: 使用语言</li></ul></li><li>外部信息 <ul><li>battery: 返回 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/BatteryManager" target="_blank" rel="noreferrer"><code>BatteryManager</code></a> 对象，可以获取电池相关信息</li><li>connection: 返回 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NetworkInformation" target="_blank" rel="noreferrer"><code>NetworkInformation</code></a> 对象，可以获取网络链接信息</li><li>geolocation: 返回 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Geolocation" target="_blank" rel="noreferrer"><code>Geolocation</code></a> 对象，可以获取地理位置信息</li><li>onLine: 是否联网</li></ul></li><li>功能支持 <ul><li>serviceWorker: 返回 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ServiceWorkerContainer" target="_blank" rel="noreferrer"><code>ServiceWorkerContainer</code></a> 对象</li><li>storage: 返回 <a href="https://developer.mozilla.org/en-US/docs/Web/API/StorageManager" target="_blank" rel="noreferrer"><code>StorageManager</code></a> 对象</li></ul></li></ul><h2 id="screen" tabindex="-1">Screen <a class="header-anchor" href="#screen" aria-label="Permalink to &quot;Screen&quot;">​</a></h2><p><code>window.screen</code> 对象包含有关用户屏幕的信息</p><ul><li><code>screen.availWidth</code>: 可用的屏幕宽度</li><li><code>screen.availHeight</code>: 可用的屏幕高度</li><li><code>screen.height</code>: 屏幕高度</li><li><code>screen.width</code>: 屏幕宽度</li></ul>',27),a=[d];function t(r,n,s,h,u,w){return e(),i("div",null,a)}const g=o(l,[["render",t]]);export{f as __pageData,g as default};
