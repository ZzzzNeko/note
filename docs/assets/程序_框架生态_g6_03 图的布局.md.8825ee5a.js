import{_ as s,o as a,c as n,V as l}from"./chunks/framework.9dc355db.js";const C=JSON.parse('{"title":"图的布局","description":"","frontmatter":{},"headers":[],"relativePath":"程序/框架生态/g6/03 图的布局.md","filePath":"程序/框架生态/g6/03 图的布局.md","lastUpdated":1688196095000}'),o={name:"程序/框架生态/g6/03 图的布局.md"},e=l(`<h1 id="图的布局" tabindex="-1">图的布局 <a class="header-anchor" href="#图的布局" aria-label="Permalink to &quot;图的布局&quot;">​</a></h1><p>图的布局指图中节点排布方式，根据数据结构分为 一般布局 和 树形布局 <br> 若未指定布局，会按照节点坐标信息进行布局，若缺少坐标信息，则默认使用 &#39;random&#39; 布局</p><h2 id="配置方式" tabindex="-1">配置方式 <a class="header-anchor" href="#配置方式" aria-label="Permalink to &quot;配置方式&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> graph </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> G6</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Graph</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">layout</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">force</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">preventOverlap</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 避免节点重叠，需要配置 nodeSize</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">nodeSize</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 节点大小</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// gpuEnabled?: boolean;     是否启用 gpu</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// workerEnabled?: boolean;  是否启用 webworker</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// workerScriptURL?: string;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// onLayoutEnd?: () =&gt; void;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ... 其他配置</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="webworker" tabindex="-1">webworker <a class="header-anchor" href="#webworker" aria-label="Permalink to &quot;webworker&quot;">​</a></h2><p>配置 <code>layout.workerEnabled: true</code> 可以开启 webworker 计算. 避免阻塞页面</p><ul><li>树图 不支持</li><li>子图 不支持</li></ul><h2 id="切换布局" tabindex="-1">切换布局 <a class="header-anchor" href="#切换布局" aria-label="Permalink to &quot;切换布局&quot;">​</a></h2><p><code>graph.updateLayout(params)</code>: 布局方法或参数的切换</p><ul><li>参数包含 <code>type</code> 且与当前布局类型不同时替换当前布局</li><li>参数不含 <code>type</code> 或与当前布局类型相同时仅更新原有参数</li></ul><p><code>graph.changeData(data)</code>: 数据源变动则重新渲染视图</p>`,11),p=[e];function t(r,c,i,y,D,F){return a(),n("div",null,p)}const A=s(o,[["render",t]]);export{C as __pageData,A as default};
