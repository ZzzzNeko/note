import{_ as l,o as e,c as i,V as o}from"./chunks/framework.9dc355db.js";const b=JSON.parse('{"title":"工作原理","description":"","frontmatter":{},"headers":[],"relativePath":"程序/知识梳理/前端概览/03 工作原理.md","filePath":"程序/知识梳理/前端概览/03 工作原理.md","lastUpdated":1688291041000}'),t={name:"程序/知识梳理/前端概览/03 工作原理.md"},a=o('<h1 id="工作原理" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理" aria-label="Permalink to &quot;工作原理&quot;">​</a></h1><h2 id="浏览器" tabindex="-1">浏览器 <a class="header-anchor" href="#浏览器" aria-label="Permalink to &quot;浏览器&quot;">​</a></h2><h3 id="加载事件" tabindex="-1">加载事件 <a class="header-anchor" href="#加载事件" aria-label="Permalink to &quot;加载事件&quot;">​</a></h3><p>文档的加载流程</p><ol><li>解析 HTML 结构。</li><li>DOM 树构建完成。//DOMContentLoaded</li><li>加载外部脚本和样式表文件。</li><li>解析并执行脚本代码。</li><li>加载图片等外部文件。</li><li>页面加载完毕。//load</li></ol><ul><li>DOMContentLoaded: HTML 加载并解析，未等待 css js 图片等资源加载</li><li>load: DOM, css, js, 图片等全部加载完毕</li></ul><p>因而 DOMContentLoaded 在 load 之前触发</p><h3 id="事件流" tabindex="-1">事件流 <a class="header-anchor" href="#事件流" aria-label="Permalink to &quot;事件流&quot;">​</a></h3><p>事件冒泡/捕获</p><ul><li><code>addEventListener</code> 第三个参数为 true 表示捕获，也可以是一个对象 <ul><li><code>useCapture</code>: 是否捕获</li><li><code>once</code>: 是否只一次</li><li><code>passive</code>: 是否禁用默认事件</li></ul></li><li><code>event.stopPropagation()</code>: 停止冒泡/捕获</li><li>冒泡捕获优先级 <ul><li>若元素无子元素，则其冒泡和捕获执行顺序依据对应事件的注册顺序</li><li>若元素有子元素，则同一事件的捕获优先级高于冒泡</li></ul></li><li>事件代理：在父节点上进行监听，根据 event.target 判断具体节点</li></ul><p>并非所有事件都支持冒泡/捕获，以下事件则不支持</p><ul><li>文档事件：load unload abort error</li><li>鼠标事件：focus blur mouseenter mouseleave</li><li>元素事件：DOMNodeInsertedIntoDocument DOMNodeRemovedFromDocument</li></ul><h2 id="缓存控制" tabindex="-1">缓存控制 <a class="header-anchor" href="#缓存控制" aria-label="Permalink to &quot;缓存控制&quot;">​</a></h2><h3 id="本地缓存" tabindex="-1">本地缓存 <a class="header-anchor" href="#本地缓存" aria-label="Permalink to &quot;本地缓存&quot;">​</a></h3><table><thead><tr><th>方式</th><th>大小</th><th>服务端</th><th>特点</th></tr></thead><tbody><tr><td>cookie</td><td>4k</td><td>Header 中携带</td><td>存在 domain 限制(20)，可由服务端控制</td></tr><tr><td>localStorage</td><td>5m</td><td>无交互</td><td>长期缓存，除非手动清除</td></tr><tr><td>sessionStorage</td><td>5m</td><td>无交互</td><td>会话缓存，页面关闭时清除(刷新不清除)</td></tr><tr><td>indexedDB</td><td>无限</td><td>无交互</td><td>长期缓存，除非手动清除</td></tr></tbody></table><p>注意：同源窗口下(如 <code>http://www.xxx.com/a</code> 与 <code>http://www.xxx.com/b</code>)</p><ul><li>localStorage 在不同页面之间<strong>共享</strong></li><li>sessionStorage 在不同页面之间<strong>独立</strong></li></ul><h3 id="网络缓存" tabindex="-1">网络缓存 <a class="header-anchor" href="#网络缓存" aria-label="Permalink to &quot;网络缓存&quot;">​</a></h3><p>强缓存: 不发送请求，直接从内存和硬盘中读取</p><ul><li>http1.0: 根据 <code>Expires: 时间</code> 字段判断是否命中</li><li>http1.1: 根据 <code>Cache-Control: max-age=xxx</code> 判断是否命中</li></ul><p>协商缓存: 发送请求，由服务器判断是否使用缓存，若命中则返回 <code>304</code> 和 <code>Not Modified</code></p><ul><li>http1.0: 根据 <code>Last-Modified</code> 字段判断是否命中 <ul><li>首次请求时服务端返回 <code>Last-Modified</code> 字段</li><li>再次请求时客户端携带 <code>If-Modified-Since</code> 字段</li></ul></li><li>http1.1: 根据 <code>ETag</code> 判断是否命中 <ul><li>首次请求时服务端返回 <code>ETag</code> 字段</li><li>再次请求时客户端携带 <code>If-None-Match</code> 字段</li></ul></li></ul><p><code>Cache-Control</code> 可以控制缓存方式</p><ul><li><code>no-store</code>: 表示不缓存，跳过强缓存和协商缓存</li><li><code>no-cache</code>: 表示缓存立即失效，下次请求时进入协商缓存</li></ul><h2 id="跨域通信" tabindex="-1">跨域通信 <a class="header-anchor" href="#跨域通信" aria-label="Permalink to &quot;跨域通信&quot;">​</a></h2><h3 id="同源策略" tabindex="-1">同源策略 <a class="header-anchor" href="#同源策略" aria-label="Permalink to &quot;同源策略&quot;">​</a></h3><p>浏览器回对请求响应进行判断，在未设置 CORS 时，非同源响应都会被拦截 <br> 同源要求：同协议、同域名(一级、二级、三级等)、同端口 <br> 允许跨域：<code>&lt;link&gt;</code>, <code>&lt;script&gt;</code> <code>&lt;img&gt;</code> 标签请求的资源可以跨域</p><h3 id="跨域请求" tabindex="-1">跨域请求 <a class="header-anchor" href="#跨域请求" aria-label="Permalink to &quot;跨域请求&quot;">​</a></h3><p>JSONP</p><ul><li>利用 script 允许跨域的特点，后端返回脚本字符串(<code>方法(数据)</code>)，前端加载后执行</li><li>只支持 get ，易受 XSS 攻击，存在安全问题</li><li>通常用于第三方服务提供接口查询服务</li></ul><p>CORS</p><ul><li>通过配置 <code>Access-Control-Allow-</code> 相关字段，允许跨域资源访问</li><li>常见字段有 <code>Origin</code>、<code>Methods</code>、<code>Headers</code>、<code>Credentials</code> 等</li><li>通常用于开发阶段或提供第三方服务</li></ul><p>nginx</p><ul><li>利用服务端请求无同源策略的特点，通过配置代理进行请求转发</li><li>通常用于开发阶段</li></ul><p>postMessage</p><ul><li>利用 H5 消息 API 进行通信</li><li>发送消息需要获取到目标源，<code>target.postMessage(message, origin)</code></li><li>接收消息需要监听全局事件，<code>window.addEventLister(&#39;message&#39;, e =&gt; { e.data })</code></li><li>通常用于跨域父子页面通信</li></ul><p>document.domain</p><ul><li>通过设置相同的二级域名，将跨域页面设置为同域</li><li>如 <code>a.xxx.com</code> 和 <code>b.xxx.com</code>，设置 <code>document.domain = &#39;xxx.com&#39;</code></li><li>只能用于一二级域名相同的情况</li></ul><h2 id="渲染引擎" tabindex="-1">渲染引擎 <a class="header-anchor" href="#渲染引擎" aria-label="Permalink to &quot;渲染引擎&quot;">​</a></h2><h3 id="工作流程" tabindex="-1">工作流程 <a class="header-anchor" href="#工作流程" aria-label="Permalink to &quot;工作流程&quot;">​</a></h3><ol><li>解析：HTML -&gt; DOM Tree; CSS -&gt; Style Rules</li><li>构建：DOM Tree + Style Rules -&gt; Render Tree</li><li>布局：Render Tree 计算坐标信息</li><li>绘制：由用户界面后端层对节点进行绘制</li></ol><h3 id="回流重绘" tabindex="-1">回流重绘 <a class="header-anchor" href="#回流重绘" aria-label="Permalink to &quot;回流重绘&quot;">​</a></h3><ul><li>回流：重新布局，并触发重绘</li><li>重绘：仅改变外观样式，开销较低</li></ul><p>触发回流的行为</p><ul><li>页面首次渲染</li><li>窗口尺寸变动</li><li>增减可视元素</li><li>元素尺寸变动</li><li>元素位置变动</li><li>元素内容变动</li><li>元素尺寸获取(TODO:)</li></ul><h3 id="复合图层" tabindex="-1">复合图层 <a class="header-anchor" href="#复合图层" aria-label="Permalink to &quot;复合图层&quot;">​</a></h3><p>页面呈现的最终内容是由多个图层复合而成的 <br> 不同图层之间的渲染互补影响，适当的创建图层可以减少大规模回流的触发 <br> 满足以下条件时会创建新的图层</p><ul><li>3D 或透视变换(perspective transform) CSS 属性</li><li>使用加速视频解码的 <code>&lt;video&gt;</code> 元素</li><li>拥有 3D (WebGL) 上下文或加速的 2D 上下文的 <code>&lt;canvas&gt;</code> 元素</li><li>混合插件(如 Flash)</li><li>对自己的 opacity 做 CSS 动画或使用一个动画变换的元素</li><li>拥有加速 CSS 过滤器的元素</li><li>元素有一个包含复合层的后代节点(换句话说，就是一个元素拥有一个子元素，该子元素在自己的层里)</li><li>元素有一个 z-index 较低且包含一个复合层的兄弟元素(换句话说就是该元素在复合层上面渲染)</li></ul><h3 id="脚本与样式表处理顺序" tabindex="-1">脚本与样式表处理顺序 <a class="header-anchor" href="#脚本与样式表处理顺序" aria-label="Permalink to &quot;脚本与样式表处理顺序&quot;">​</a></h3><ul><li>脚本 <ul><li>同步脚本: 当遇到 <code>&lt;script&gt;</code> 标签时优先执行脚本并暂停文档解析 <ul><li>内部脚本: 直接执行脚本</li><li>外部脚本: 等待资源加载完毕后解析和执行</li></ul></li><li>异步脚本: 不会停止文档解析 <ul><li>defer 标记: 延迟加载，有序执行</li><li>async 标记: 异步加载，无序执行</li></ul></li></ul></li><li>预解析 <ul><li>执行脚本时, 其他线程会解析文档的其他内容, 找出并加载需要通过网络加载的其他资源</li><li>这里的预解析只会解析外部资源的引用, 不会修改 DOM 树</li></ul></li><li>样式表 <ul><li>样式表加载<strong>不阻塞 DOM 树解析</strong></li><li>样式表加载<strong>会阻塞 DOM 树渲染</strong></li><li>样式表加载会<strong>阻塞脚本运行</strong></li><li>样式表解析时对脚本的阻塞(原文说加载和解析过程, 测试发现加载时都会阻塞) <ul><li>Gecko: 样式表在加载和解析时会禁止脚本</li><li>Webkit: 仅当脚本尝试访问的样式属性可能受未加载的样式表影响时会禁止脚本</li></ul></li></ul></li></ul><h2 id="事件循环" tabindex="-1">事件循环 <a class="header-anchor" href="#事件循环" aria-label="Permalink to &quot;事件循环&quot;">​</a></h2><p>解决 js 单线程允许不阻塞的机制</p><ul><li>同步任务在主线程执行</li><li>异步任务会添加到任务队列中</li><li>主线程中同步任务执行完后会读取任务队列</li><li>如此反复形成循环</li></ul><p>任务队列中的任务分为</p><ul><li>宏任务：setTimeout postMessage MessageChannel UIrender</li><li>微任务：Promise MutationObserver</li></ul><p>当前执行栈执行完毕时优先处理微任务队列，再处理宏任务</p><p>注：事件冒泡优先级高于宏任务，低于微任务</p><h2 id="垃圾回收" tabindex="-1">垃圾回收 <a class="header-anchor" href="#垃圾回收" aria-label="Permalink to &quot;垃圾回收&quot;">​</a></h2><p>新生代</p><ul><li>内存空间分为两部分：from 和 to</li><li>新分配对象进入 from 空间，from 空间占满时，执行 GC</li><li>遍历 from 中存活对象复制到 to 空间，复制完成后 from 与 to 空间互换</li></ul><p>老生代：新生代中执行一次 GC 存活和 to 空间大于 25%时，会对新生代对象转移进老生代</p><ul><li>标记清除：当某空间没有分块、空间中对象超过限制不能保证新生代对象进入老生代时触发 GC <ul><li>遍历堆中所有对象，标记存活对象，销毁未标记对象</li><li>标记清除会造成全停顿</li><li>2011 年，使用增量标记延缓全停顿的状态</li><li>2018 年，使用并发标记，在 GC 扫描和标记对象时允许 JS 执行</li></ul></li><li>标记压缩：对象清除后会造成堆内存出现碎片的情况 <ul><li>将存活对象向一段移动，直到所有对象移动完成</li></ul></li></ul>',62),d=[a];function r(c,n,s,u,h,p){return e(),i("div",null,d)}const x=l(t,[["render",r]]);export{b as __pageData,x as default};
