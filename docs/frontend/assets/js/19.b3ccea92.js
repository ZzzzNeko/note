(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{295:function(v,_,e){"use strict";e.r(_);var t=e(10),o=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"网络安全"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#网络安全"}},[v._v("#")]),v._v(" 网络安全")]),v._v(" "),_("h2",{attrs:{id:"跨站脚本攻击-xss"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#跨站脚本攻击-xss"}},[v._v("#")]),v._v(" 跨站脚本攻击(XSS)")]),v._v(" "),_("p",[v._v("攻击原理：通过注入包含可被浏览器解析的标签(如 "),_("code",[v._v("script")]),v._v(")，让浏览器对标签内容解析为脚本并执行。")]),v._v(" "),_("p",[v._v("攻击方式：通过向数据库提交恶意代码(常见于社区、论坛网站)；创建包含恶意代码的 URL 由前端执行。")]),v._v(" "),_("p",[v._v("预防方式")]),v._v(" "),_("ul",[_("li",[v._v("服务端：设置 CSP(内容安全策略)，拦截不安全的数据，设置 HTTP-only 避免脚本获取")]),v._v(" "),_("li",[v._v("服务端渲染：在使用数据拼接 HTML 时对数据进行转义处理")]),v._v(" "),_("li",[v._v("浏览器渲染：在使用 innerHTML/v-html 时对文本进行转义处理")])]),v._v(" "),_("h2",{attrs:{id:"跨站请求伪造-csrf"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#跨站请求伪造-csrf"}},[v._v("#")]),v._v(" 跨站请求伪造(CSRF)")]),v._v(" "),_("p",[v._v("攻击原理：若网站仅通过 "),_("code",[v._v("cookie")]),v._v(" 作为用户身份验证，则服务端只能确保请求的来源而无法确保由是否由用户本身发出")]),v._v(" "),_("p",[v._v("攻击方式：攻击网站(B)向使用简单授权的网站(A)发送请求，若用户在 A 的 "),_("code",[v._v("cookie")]),v._v(" 未过期，则可能遭受伪造攻击。")]),v._v(" "),_("p",[v._v("预防方式")]),v._v(" "),_("ul",[_("li",[v._v("同源检测：检测 "),_("code",[v._v("Origin")]),v._v(" 或 "),_("code",[v._v("Referer")]),v._v(" 字段拦截非同源请求")]),v._v(" "),_("li",[v._v("凭证检测：使用 "),_("code",[v._v("Token")]),v._v(" 对用户进行检测而非简单的 "),_("code",[v._v("cookie")])]),v._v(" "),_("li",[v._v("双重 cookie：在发送请求时携带 cookie 作为 URL 参数，后端验证 cookie 与参数是否相同 (利用 CSRF 攻击无法获取 cookie 值的特点)")])])])}),[],!1,null,null,null);_.default=o.exports}}]);